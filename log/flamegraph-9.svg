<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1382" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1365.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1365.00"> </text><svg id="frames" x="10" width="1180"><g><title>webserver`alloc::vec::Vec&lt;T&gt;::push (86 samples, 0.16%)</title><rect x="0.2544%" y="1029" width="0.1562%" height="15" fill="rgb(227,0,7)"/><text x="0.5044%" y="1039.50"></text></g><g><title>webserver`&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (72 samples, 0.13%)</title><rect x="0.8176%" y="805" width="0.1308%" height="15" fill="rgb(217,0,24)"/><text x="1.0676%" y="815.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping (109 samples, 0.20%)</title><rect x="1.0919%" y="693" width="0.1980%" height="15" fill="rgb(221,193,54)"/><text x="1.3419%" y="703.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_bytes (95 samples, 0.17%)</title><rect x="1.1173%" y="677" width="0.1726%" height="15" fill="rgb(248,212,6)"/><text x="1.3673%" y="687.50"></text></g><g><title>webserver`core::mem::replace (137 samples, 0.25%)</title><rect x="1.0501%" y="741" width="0.2489%" height="15" fill="rgb(208,68,35)"/><text x="1.3001%" y="751.50"></text></g><g><title>webserver`core::mem::swap (125 samples, 0.23%)</title><rect x="1.0719%" y="725" width="0.2271%" height="15" fill="rgb(232,128,0)"/><text x="1.3219%" y="735.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_one (118 samples, 0.21%)</title><rect x="1.0846%" y="709" width="0.2144%" height="15" fill="rgb(207,160,47)"/><text x="1.3346%" y="719.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 0.31%)</title><rect x="0.9865%" y="789" width="0.3143%" height="15" fill="rgb(228,23,34)"/><text x="1.2365%" y="799.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (154 samples, 0.28%)</title><rect x="1.0211%" y="773" width="0.2798%" height="15" fill="rgb(218,30,26)"/><text x="1.2711%" y="783.50"></text></g><g><title>webserver`core::mem::take (145 samples, 0.26%)</title><rect x="1.0374%" y="757" width="0.2634%" height="15" fill="rgb(220,122,19)"/><text x="1.2874%" y="767.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (63 samples, 0.11%)</title><rect x="1.7968%" y="677" width="0.1145%" height="15" fill="rgb(250,228,42)"/><text x="2.0468%" y="687.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (106 samples, 0.19%)</title><rect x="1.7205%" y="693" width="0.1926%" height="15" fill="rgb(240,193,28)"/><text x="1.9705%" y="703.50"></text></g><g><title>webserver`&lt;core::iter::LoopState&lt;C,B&gt; as core::ops::try::Try&gt;::into_result (142 samples, 0.26%)</title><rect x="3.1013%" y="645" width="0.2580%" height="15" fill="rgb(216,20,37)"/><text x="3.3513%" y="655.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (57 samples, 0.10%)</title><rect x="3.9316%" y="629" width="0.1036%" height="15" fill="rgb(206,188,39)"/><text x="4.1816%" y="639.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (65 samples, 0.12%)</title><rect x="4.0352%" y="629" width="0.1181%" height="15" fill="rgb(217,207,13)"/><text x="4.2852%" y="639.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::offset (80 samples, 0.15%)</title><rect x="4.1533%" y="629" width="0.1453%" height="15" fill="rgb(231,73,38)"/><text x="4.4033%" y="639.50"></text></g><g><title>webserver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (133 samples, 0.24%)</title><rect x="4.2986%" y="629" width="0.2416%" height="15" fill="rgb(225,20,46)"/><text x="4.5486%" y="639.50"></text></g><g><title>webserver`&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (697 samples, 1.27%)</title><rect x="3.3593%" y="645" width="1.2663%" height="15" fill="rgb(210,31,41)"/><text x="3.6093%" y="655.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (555 samples, 1.01%)</title><rect x="4.6256%" y="645" width="1.0083%" height="15" fill="rgb(221,200,47)"/><text x="4.8756%" y="655.50"></text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii::_{{closure}} (311 samples, 0.57%)</title><rect x="5.0689%" y="629" width="0.5650%" height="15" fill="rgb(226,26,5)"/><text x="5.3189%" y="639.50"></text></g><g><title>webserver`core::num::_&lt;impl u8&gt;::is_ascii (214 samples, 0.39%)</title><rect x="5.2452%" y="613" width="0.3888%" height="15" fill="rgb(249,33,26)"/><text x="5.4952%" y="623.50"></text></g><g><title>webserver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (72 samples, 0.13%)</title><rect x="5.7048%" y="645" width="0.1308%" height="15" fill="rgb(235,183,28)"/><text x="5.9548%" y="655.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all (2,164 samples, 3.93%)</title><rect x="1.9476%" y="677" width="3.9316%" height="15" fill="rgb(221,5,38)"/><text x="2.1976%" y="687.50">webs..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (2,090 samples, 3.80%)</title><rect x="2.0821%" y="661" width="3.7972%" height="15" fill="rgb(247,18,42)"/><text x="2.3321%" y="671.50">webs..</text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii (2,222 samples, 4.04%)</title><rect x="1.9222%" y="693" width="4.0370%" height="15" fill="rgb(241,131,45)"/><text x="2.1722%" y="703.50">webs..</text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::last (74 samples, 0.13%)</title><rect x="6.0301%" y="677" width="0.1344%" height="15" fill="rgb(249,31,29)"/><text x="6.2801%" y="687.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (74 samples, 0.13%)</title><rect x="6.1808%" y="661" width="0.1344%" height="15" fill="rgb(225,111,53)"/><text x="6.4308%" y="671.50"></text></g><g><title>webserver`csv::byte_record::Bounds::end (196 samples, 0.36%)</title><rect x="5.9628%" y="693" width="0.3561%" height="15" fill="rgb(238,160,17)"/><text x="6.2128%" y="703.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (83 samples, 0.15%)</title><rect x="6.1681%" y="677" width="0.1508%" height="15" fill="rgb(214,148,48)"/><text x="6.4181%" y="687.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::validate (2,539 samples, 4.61%)</title><rect x="1.7096%" y="709" width="4.6129%" height="15" fill="rgb(232,36,49)"/><text x="1.9596%" y="719.50">webse..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (61 samples, 0.11%)</title><rect x="6.5170%" y="677" width="0.1108%" height="15" fill="rgb(209,103,24)"/><text x="6.7670%" y="687.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (65 samples, 0.12%)</title><rect x="6.6859%" y="645" width="0.1181%" height="15" fill="rgb(229,88,8)"/><text x="6.9359%" y="655.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (87 samples, 0.16%)</title><rect x="6.6532%" y="661" width="0.1581%" height="15" fill="rgb(213,181,19)"/><text x="6.9032%" y="671.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (97 samples, 0.18%)</title><rect x="6.6387%" y="677" width="0.1762%" height="15" fill="rgb(254,191,54)"/><text x="6.8887%" y="687.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (173 samples, 0.31%)</title><rect x="6.5024%" y="693" width="0.3143%" height="15" fill="rgb(241,83,37)"/><text x="6.7524%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`read (66 samples, 0.12%)</title><rect x="6.9839%" y="677" width="0.1199%" height="15" fill="rgb(233,36,39)"/><text x="7.2339%" y="687.50"></text></g><g><title>webserver`&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (104 samples, 0.19%)</title><rect x="6.9730%" y="693" width="0.1890%" height="15" fill="rgb(226,3,54)"/><text x="7.2230%" y="703.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (60 samples, 0.11%)</title><rect x="9.4257%" y="677" width="0.1090%" height="15" fill="rgb(245,192,40)"/><text x="9.6757%" y="687.50"></text></g><g><title>webserver`core::cmp::PartialEq::ne (135 samples, 0.25%)</title><rect x="9.7091%" y="661" width="0.2453%" height="15" fill="rgb(238,167,29)"/><text x="9.9591%" y="671.50"></text></g><g><title>webserver`&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (94 samples, 0.17%)</title><rect x="9.7836%" y="645" width="0.1708%" height="15" fill="rgb(232,182,51)"/><text x="10.0336%" y="655.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (135 samples, 0.25%)</title><rect x="9.9707%" y="661" width="0.2453%" height="15" fill="rgb(231,60,39)"/><text x="10.2207%" y="671.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::Ord for u8&gt;::cmp (76 samples, 0.14%)</title><rect x="10.0779%" y="645" width="0.1381%" height="15" fill="rgb(208,69,12)"/><text x="10.3279%" y="655.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::ge (488 samples, 0.89%)</title><rect x="9.5347%" y="677" width="0.8866%" height="15" fill="rgb(235,93,37)"/><text x="9.7847%" y="687.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::unwrap_or (113 samples, 0.21%)</title><rect x="10.2160%" y="661" width="0.2053%" height="15" fill="rgb(213,116,39)"/><text x="10.4660%" y="671.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (56 samples, 0.10%)</title><rect x="10.5703%" y="661" width="0.1017%" height="15" fill="rgb(222,207,29)"/><text x="10.8203%" y="671.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::gt (196 samples, 0.36%)</title><rect x="10.4213%" y="677" width="0.3561%" height="15" fill="rgb(206,96,30)"/><text x="10.6713%" y="687.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::unwrap_or (58 samples, 0.11%)</title><rect x="10.6720%" y="661" width="0.1054%" height="15" fill="rgb(218,138,4)"/><text x="10.9220%" y="671.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::len (197 samples, 0.36%)</title><rect x="10.8610%" y="677" width="0.3579%" height="15" fill="rgb(250,191,14)"/><text x="11.1110%" y="687.50"></text></g><g><title>webserver`csv_core::reader::Dfa::get_output (285 samples, 0.52%)</title><rect x="11.2189%" y="677" width="0.5178%" height="15" fill="rgb(239,60,40)"/><text x="11.4689%" y="687.50"></text></g><g><title>webserver`csv_core::reader::Reader::read_record (2,378 samples, 4.32%)</title><rect x="7.4962%" y="693" width="4.3204%" height="15" fill="rgb(206,27,48)"/><text x="7.7462%" y="703.50">webse..</text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_byte_record (3,017 samples, 5.48%)</title><rect x="6.3371%" y="709" width="5.4814%" height="15" fill="rgb(225,35,8)"/><text x="6.5871%" y="719.50">webserv..</text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_record (5,692 samples, 10.34%)</title><rect x="1.4825%" y="725" width="10.3414%" height="15" fill="rgb(250,213,24)"/><text x="1.7325%" y="735.50">webserver`csv::..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.12%)</title><rect x="12.0238%" y="581" width="0.1163%" height="15" fill="rgb(247,123,22)"/><text x="12.2738%" y="591.50"></text></g><g><title>webserver`csv::byte_record::Bounds::end (148 samples, 0.27%)</title><rect x="12.1400%" y="581" width="0.2689%" height="15" fill="rgb(231,138,38)"/><text x="12.3900%" y="591.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (76 samples, 0.14%)</title><rect x="12.2709%" y="565" width="0.1381%" height="15" fill="rgb(231,145,46)"/><text x="12.5209%" y="575.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (70 samples, 0.13%)</title><rect x="12.2818%" y="549" width="0.1272%" height="15" fill="rgb(251,118,11)"/><text x="12.5318%" y="559.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::as_slice (218 samples, 0.40%)</title><rect x="12.0147%" y="597" width="0.3961%" height="15" fill="rgb(217,147,25)"/><text x="12.2647%" y="607.50"></text></g><g><title>webserver`&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (234 samples, 0.43%)</title><rect x="11.9983%" y="613" width="0.4251%" height="15" fill="rgb(247,81,37)"/><text x="12.2483%" y="623.50"></text></g><g><title>webserver`&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (249 samples, 0.45%)</title><rect x="11.9747%" y="645" width="0.4524%" height="15" fill="rgb(209,12,38)"/><text x="12.2247%" y="655.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::iter (240 samples, 0.44%)</title><rect x="11.9911%" y="629" width="0.4360%" height="15" fill="rgb(227,1,9)"/><text x="12.2411%" y="639.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (263 samples, 0.48%)</title><rect x="11.9511%" y="693" width="0.4778%" height="15" fill="rgb(248,47,43)"/><text x="12.2011%" y="703.50"></text></g><g><title>webserver`csv::deserializer::deserialize_string_record::_{{closure}} (251 samples, 0.46%)</title><rect x="11.9729%" y="677" width="0.4560%" height="15" fill="rgb(221,10,30)"/><text x="12.2229%" y="687.50"></text></g><g><title>webserver`csv::string_record::StringRecord::iter (251 samples, 0.46%)</title><rect x="11.9729%" y="661" width="0.4560%" height="15" fill="rgb(210,229,1)"/><text x="12.2229%" y="671.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (61 samples, 0.11%)</title><rect x="12.6197%" y="613" width="0.1108%" height="15" fill="rgb(222,148,37)"/><text x="12.8697%" y="623.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (82 samples, 0.15%)</title><rect x="12.8958%" y="581" width="0.1490%" height="15" fill="rgb(234,67,33)"/><text x="13.1458%" y="591.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::as_slice (248 samples, 0.45%)</title><rect x="12.5961%" y="629" width="0.4506%" height="15" fill="rgb(247,98,35)"/><text x="12.8461%" y="639.50"></text></g><g><title>webserver`csv::byte_record::Bounds::end (172 samples, 0.31%)</title><rect x="12.7341%" y="613" width="0.3125%" height="15" fill="rgb(247,138,52)"/><text x="12.9841%" y="623.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (94 samples, 0.17%)</title><rect x="12.8759%" y="597" width="0.1708%" height="15" fill="rgb(213,79,30)"/><text x="13.1259%" y="607.50"></text></g><g><title>webserver`&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (269 samples, 0.49%)</title><rect x="12.5670%" y="645" width="0.4887%" height="15" fill="rgb(246,177,23)"/><text x="12.8170%" y="655.50"></text></g><g><title>webserver`csv::string_record::StringRecord::iter (336 samples, 0.61%)</title><rect x="12.4489%" y="693" width="0.6105%" height="15" fill="rgb(230,62,27)"/><text x="12.6989%" y="703.50"></text></g><g><title>webserver`&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (323 samples, 0.59%)</title><rect x="12.4725%" y="677" width="0.5868%" height="15" fill="rgb(216,154,8)"/><text x="12.7225%" y="687.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::iter (276 samples, 0.50%)</title><rect x="12.5579%" y="661" width="0.5014%" height="15" fill="rgb(244,35,45)"/><text x="12.8079%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (93 samples, 0.17%)</title><rect x="15.4558%" y="485" width="0.1690%" height="15" fill="rgb(251,115,12)"/><text x="15.7058%" y="495.50"></text></g><g><title>webserver`&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (632 samples, 1.15%)</title><rect x="14.8725%" y="501" width="1.1482%" height="15" fill="rgb(240,54,50)"/><text x="15.1225%" y="511.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::len (139 samples, 0.25%)</title><rect x="15.7682%" y="485" width="0.2525%" height="15" fill="rgb(233,84,52)"/><text x="16.0182%" y="495.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_StopTime::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::StopTime&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (981 samples, 1.78%)</title><rect x="14.3184%" y="533" width="1.7823%" height="15" fill="rgb(207,117,47)"/><text x="14.5684%" y="543.50">w..</text></g><g><title>webserver`core::slice::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (837 samples, 1.52%)</title><rect x="14.5800%" y="517" width="1.5207%" height="15" fill="rgb(249,43,39)"/><text x="14.8300%" y="527.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1,051 samples, 1.91%)</title><rect x="14.2221%" y="565" width="1.9095%" height="15" fill="rgb(209,38,44)"/><text x="14.4721%" y="575.50">w..</text></g><g><title>webserver`serde::de::Visitor::visit_borrowed_bytes (1,023 samples, 1.86%)</title><rect x="14.2730%" y="549" width="1.8586%" height="15" fill="rgb(236,212,23)"/><text x="14.5230%" y="559.50">w..</text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,131 samples, 2.05%)</title><rect x="14.0859%" y="613" width="2.0548%" height="15" fill="rgb(242,79,21)"/><text x="14.3359%" y="623.50">w..</text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_StopTime::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::StopTime&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1,108 samples, 2.01%)</title><rect x="14.1277%" y="597" width="2.0130%" height="15" fill="rgb(211,96,35)"/><text x="14.3777%" y="607.50">w..</text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1,078 samples, 1.96%)</title><rect x="14.1822%" y="581" width="1.9585%" height="15" fill="rgb(253,215,40)"/><text x="14.4322%" y="591.50">w..</text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::has_headers (81 samples, 0.15%)</title><rect x="16.2424%" y="597" width="0.1472%" height="15" fill="rgb(211,81,21)"/><text x="16.4924%" y="607.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::has_headers (109 samples, 0.20%)</title><rect x="16.2007%" y="613" width="0.1980%" height="15" fill="rgb(208,190,38)"/><text x="16.4507%" y="623.50"></text></g><g><title>webserver`&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (67 samples, 0.12%)</title><rect x="16.5749%" y="581" width="0.1217%" height="15" fill="rgb(235,213,38)"/><text x="16.8249%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.10%)</title><rect x="16.5949%" y="565" width="0.1017%" height="15" fill="rgb(237,122,38)"/><text x="16.8449%" y="575.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::as_ptr (112 samples, 0.20%)</title><rect x="17.6505%" y="469" width="0.2035%" height="15" fill="rgb(244,218,35)"/><text x="17.9005%" y="479.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (190 samples, 0.35%)</title><rect x="17.5887%" y="485" width="0.3452%" height="15" fill="rgb(240,68,47)"/><text x="17.8387%" y="495.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (67 samples, 0.12%)</title><rect x="18.2064%" y="437" width="0.1217%" height="15" fill="rgb(210,16,53)"/><text x="18.4564%" y="447.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (203 samples, 0.37%)</title><rect x="18.1120%" y="453" width="0.3688%" height="15" fill="rgb(235,124,12)"/><text x="18.3620%" y="463.50"></text></g><g><title>webserver`core::slice::from_raw_parts (70 samples, 0.13%)</title><rect x="18.3536%" y="437" width="0.1272%" height="15" fill="rgb(224,169,11)"/><text x="18.6036%" y="447.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (295 samples, 0.54%)</title><rect x="18.0102%" y="469" width="0.5360%" height="15" fill="rgb(250,166,2)"/><text x="18.2602%" y="479.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (335 samples, 0.61%)</title><rect x="17.9539%" y="485" width="0.6086%" height="15" fill="rgb(242,216,29)"/><text x="18.2039%" y="495.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (582 samples, 1.06%)</title><rect x="17.5106%" y="501" width="1.0574%" height="15" fill="rgb(230,116,27)"/><text x="17.7606%" y="511.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::as_ptr (95 samples, 0.17%)</title><rect x="18.7914%" y="453" width="0.1726%" height="15" fill="rgb(228,99,48)"/><text x="19.0414%" y="463.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (180 samples, 0.33%)</title><rect x="18.7333%" y="469" width="0.3270%" height="15" fill="rgb(253,11,6)"/><text x="18.9833%" y="479.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (57 samples, 0.10%)</title><rect x="19.4019%" y="405" width="0.1036%" height="15" fill="rgb(247,143,39)"/><text x="19.6519%" y="415.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (182 samples, 0.33%)</title><rect x="19.3038%" y="421" width="0.3307%" height="15" fill="rgb(236,97,10)"/><text x="19.5538%" y="431.50"></text></g><g><title>webserver`core::slice::from_raw_parts (61 samples, 0.11%)</title><rect x="19.5236%" y="405" width="0.1108%" height="15" fill="rgb(233,208,19)"/><text x="19.7736%" y="415.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (271 samples, 0.49%)</title><rect x="19.1948%" y="437" width="0.4924%" height="15" fill="rgb(216,164,2)"/><text x="19.4448%" y="447.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (337 samples, 0.61%)</title><rect x="19.0767%" y="469" width="0.6123%" height="15" fill="rgb(220,129,5)"/><text x="19.3267%" y="479.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (304 samples, 0.55%)</title><rect x="19.1366%" y="453" width="0.5523%" height="15" fill="rgb(242,17,10)"/><text x="19.3866%" y="463.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (559 samples, 1.02%)</title><rect x="18.6861%" y="485" width="1.0156%" height="15" fill="rgb(242,107,0)"/><text x="18.9361%" y="495.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (1,412 samples, 2.57%)</title><rect x="17.1436%" y="517" width="2.5654%" height="15" fill="rgb(251,28,31)"/><text x="17.3936%" y="527.50">we..</text></g><g><title>webserver`csv::byte_record::Bounds::ends (621 samples, 1.13%)</title><rect x="18.5807%" y="501" width="1.1282%" height="15" fill="rgb(233,223,10)"/><text x="18.8307%" y="511.50"></text></g><g><title>webserver`core::str::from_utf8 (247 samples, 0.45%)</title><rect x="20.0578%" y="485" width="0.4488%" height="15" fill="rgb(215,21,27)"/><text x="20.3078%" y="495.50"></text></g><g><title>webserver`core::str::run_utf8_validation (198 samples, 0.36%)</title><rect x="20.1468%" y="469" width="0.3597%" height="15" fill="rgb(232,23,21)"/><text x="20.3968%" y="479.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (344 samples, 0.62%)</title><rect x="19.9106%" y="501" width="0.6250%" height="15" fill="rgb(244,5,23)"/><text x="20.1606%" y="511.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (460 samples, 0.84%)</title><rect x="19.7180%" y="517" width="0.8357%" height="15" fill="rgb(226,81,46)"/><text x="19.9680%" y="527.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (1,927 samples, 3.50%)</title><rect x="17.0655%" y="533" width="3.5010%" height="15" fill="rgb(247,70,30)"/><text x="17.3155%" y="543.50">web..</text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::_{{closure}} (1,984 samples, 3.60%)</title><rect x="16.9710%" y="549" width="3.6046%" height="15" fill="rgb(212,68,19)"/><text x="17.2210%" y="559.50">webs..</text></g><g><title>webserver`core::option::Option&lt;T&gt;::and_then (2,086 samples, 3.79%)</title><rect x="16.7966%" y="565" width="3.7899%" height="15" fill="rgb(240,187,13)"/><text x="17.0466%" y="575.50">webs..</text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (2,174 samples, 3.95%)</title><rect x="16.6966%" y="581" width="3.9498%" height="15" fill="rgb(223,113,26)"/><text x="16.9466%" y="591.50">webs..</text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (164 samples, 0.30%)</title><rect x="20.6828%" y="581" width="0.2980%" height="15" fill="rgb(206,192,2)"/><text x="20.9328%" y="591.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes::_{{closure}} (74 samples, 0.13%)</title><rect x="20.8463%" y="565" width="0.1344%" height="15" fill="rgb(241,108,4)"/><text x="21.0963%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (2,525 samples, 4.59%)</title><rect x="16.4423%" y="597" width="4.5875%" height="15" fill="rgb(247,173,49)"/><text x="16.6923%" y="607.50">webse..</text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (2,578 samples, 4.68%)</title><rect x="16.3987%" y="613" width="4.6838%" height="15" fill="rgb(224,114,35)"/><text x="16.6487%" y="623.50">webse..</text></g><g><title>webserver`core::ops::function::FnOnce::call_once (58 samples, 0.11%)</title><rect x="21.3005%" y="597" width="0.1054%" height="15" fill="rgb(245,159,27)"/><text x="21.5505%" y="607.50"></text></g><g><title>webserver`core::result::Result&lt;T,E&gt;::map (149 samples, 0.27%)</title><rect x="21.1479%" y="613" width="0.2707%" height="15" fill="rgb(245,172,44)"/><text x="21.3979%" y="623.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (4,301 samples, 7.81%)</title><rect x="13.6644%" y="629" width="7.8142%" height="15" fill="rgb(236,23,11)"/><text x="13.9144%" y="639.50">webserver`&lt;..</text></g><g><title>webserver`serde::de::MapAccess::next_key (4,388 samples, 7.97%)</title><rect x="13.6171%" y="645" width="7.9722%" height="15" fill="rgb(205,117,38)"/><text x="13.8671%" y="655.50">webserver`s..</text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (69 samples, 0.13%)</title><rect x="22.1562%" y="469" width="0.1254%" height="15" fill="rgb(237,72,25)"/><text x="22.4062%" y="479.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (61 samples, 0.11%)</title><rect x="22.1707%" y="453" width="0.1108%" height="15" fill="rgb(244,70,9)"/><text x="22.4207%" y="463.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (143 samples, 0.26%)</title><rect x="22.0272%" y="485" width="0.2598%" height="15" fill="rgb(217,125,39)"/><text x="22.2772%" y="495.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (72 samples, 0.13%)</title><rect x="22.4106%" y="421" width="0.1308%" height="15" fill="rgb(235,36,10)"/><text x="22.6606%" y="431.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (126 samples, 0.23%)</title><rect x="22.3161%" y="469" width="0.2289%" height="15" fill="rgb(251,123,47)"/><text x="22.5661%" y="479.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (87 samples, 0.16%)</title><rect x="22.3869%" y="453" width="0.1581%" height="15" fill="rgb(221,13,13)"/><text x="22.6369%" y="463.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (78 samples, 0.14%)</title><rect x="22.4033%" y="437" width="0.1417%" height="15" fill="rgb(238,131,9)"/><text x="22.6533%" y="447.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (347 samples, 0.63%)</title><rect x="21.9164%" y="501" width="0.6304%" height="15" fill="rgb(211,50,8)"/><text x="22.1664%" y="511.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (141 samples, 0.26%)</title><rect x="22.2907%" y="485" width="0.2562%" height="15" fill="rgb(245,182,24)"/><text x="22.5407%" y="495.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (68 samples, 0.12%)</title><rect x="22.5468%" y="501" width="0.1235%" height="15" fill="rgb(242,14,37)"/><text x="22.7968%" y="511.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (432 samples, 0.78%)</title><rect x="21.8873%" y="517" width="0.7849%" height="15" fill="rgb(246,228,12)"/><text x="22.1373%" y="527.50"></text></g><g><title>webserver`core::mem::swap (77 samples, 0.14%)</title><rect x="22.7576%" y="469" width="0.1399%" height="15" fill="rgb(213,55,15)"/><text x="23.0076%" y="479.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_one (72 samples, 0.13%)</title><rect x="22.7667%" y="453" width="0.1308%" height="15" fill="rgb(209,9,3)"/><text x="23.0167%" y="463.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (577 samples, 1.05%)</title><rect x="21.8510%" y="533" width="1.0483%" height="15" fill="rgb(230,59,30)"/><text x="22.1010%" y="543.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (122 samples, 0.22%)</title><rect x="22.6776%" y="517" width="0.2217%" height="15" fill="rgb(209,121,21)"/><text x="22.9276%" y="527.50"></text></g><g><title>webserver`core::mem::take (113 samples, 0.21%)</title><rect x="22.6940%" y="501" width="0.2053%" height="15" fill="rgb(220,109,13)"/><text x="22.9440%" y="511.50"></text></g><g><title>webserver`core::mem::replace (101 samples, 0.18%)</title><rect x="22.7158%" y="485" width="0.1835%" height="15" fill="rgb(232,18,1)"/><text x="22.9658%" y="495.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (596 samples, 1.08%)</title><rect x="21.8201%" y="565" width="1.0828%" height="15" fill="rgb(215,41,42)"/><text x="22.0701%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (594 samples, 1.08%)</title><rect x="21.8237%" y="549" width="1.0792%" height="15" fill="rgb(224,123,36)"/><text x="22.0737%" y="559.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (645 samples, 1.17%)</title><rect x="21.7492%" y="581" width="1.1719%" height="15" fill="rgb(240,125,3)"/><text x="21.9992%" y="591.50"></text></g><g><title>webserver`&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (655 samples, 1.19%)</title><rect x="21.7474%" y="597" width="1.1900%" height="15" fill="rgb(205,98,50)"/><text x="21.9974%" y="607.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (66 samples, 0.12%)</title><rect x="23.0828%" y="469" width="0.1199%" height="15" fill="rgb(205,185,37)"/><text x="23.3328%" y="479.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (69 samples, 0.13%)</title><rect x="23.2191%" y="453" width="0.1254%" height="15" fill="rgb(238,207,15)"/><text x="23.4691%" y="463.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (158 samples, 0.29%)</title><rect x="23.0592%" y="485" width="0.2871%" height="15" fill="rgb(213,199,42)"/><text x="23.3092%" y="495.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (78 samples, 0.14%)</title><rect x="23.2045%" y="469" width="0.1417%" height="15" fill="rgb(235,201,11)"/><text x="23.4545%" y="479.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.39%)</title><rect x="23.0537%" y="501" width="0.3906%" height="15" fill="rgb(207,46,11)"/><text x="23.3037%" y="511.50"></text></g><g><title>webserver`core::mem::replace (58 samples, 0.11%)</title><rect x="23.4625%" y="469" width="0.1054%" height="15" fill="rgb(241,35,35)"/><text x="23.7125%" y="479.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (296 samples, 0.54%)</title><rect x="23.0319%" y="517" width="0.5378%" height="15" fill="rgb(243,32,47)"/><text x="23.2819%" y="527.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (68 samples, 0.12%)</title><rect x="23.4462%" y="501" width="0.1235%" height="15" fill="rgb(247,202,23)"/><text x="23.6962%" y="511.50"></text></g><g><title>webserver`core::mem::take (65 samples, 0.12%)</title><rect x="23.4516%" y="485" width="0.1181%" height="15" fill="rgb(219,102,11)"/><text x="23.7016%" y="495.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (305 samples, 0.55%)</title><rect x="23.0210%" y="533" width="0.5541%" height="15" fill="rgb(243,110,44)"/><text x="23.2710%" y="543.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 0.12%)</title><rect x="23.5752%" y="533" width="0.1199%" height="15" fill="rgb(222,74,54)"/><text x="23.8252%" y="543.50"></text></g><g><title>webserver`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (56 samples, 0.10%)</title><rect x="23.5933%" y="517" width="0.1017%" height="15" fill="rgb(216,99,12)"/><text x="23.8433%" y="527.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::infer_deserialize (454 samples, 0.82%)</title><rect x="22.9592%" y="549" width="0.8248%" height="15" fill="rgb(226,22,26)"/><text x="23.2092%" y="559.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::infer_deserialize (464 samples, 0.84%)</title><rect x="22.9520%" y="565" width="0.8430%" height="15" fill="rgb(217,163,10)"/><text x="23.2020%" y="575.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::StopId as serde::de::Deserialize&gt;::deserialize (473 samples, 0.86%)</title><rect x="22.9374%" y="597" width="0.8594%" height="15" fill="rgb(213,25,53)"/><text x="23.1874%" y="607.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_any (469 samples, 0.85%)</title><rect x="22.9447%" y="581" width="0.8521%" height="15" fill="rgb(252,105,26)"/><text x="23.1947%" y="591.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (58 samples, 0.11%)</title><rect x="24.0530%" y="437" width="0.1054%" height="15" fill="rgb(220,39,43)"/><text x="24.3030%" y="447.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (68 samples, 0.12%)</title><rect x="24.0403%" y="453" width="0.1235%" height="15" fill="rgb(229,68,48)"/><text x="24.2903%" y="463.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (71 samples, 0.13%)</title><rect x="24.0366%" y="469" width="0.1290%" height="15" fill="rgb(252,8,32)"/><text x="24.2866%" y="479.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (114 samples, 0.21%)</title><rect x="23.9640%" y="485" width="0.2071%" height="15" fill="rgb(223,20,43)"/><text x="24.2140%" y="495.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (56 samples, 0.10%)</title><rect x="24.3328%" y="405" width="0.1017%" height="15" fill="rgb(229,81,49)"/><text x="24.5828%" y="415.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (76 samples, 0.14%)</title><rect x="24.3110%" y="421" width="0.1381%" height="15" fill="rgb(236,28,36)"/><text x="24.5610%" y="431.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (139 samples, 0.25%)</title><rect x="24.2001%" y="469" width="0.2525%" height="15" fill="rgb(249,185,26)"/><text x="24.4501%" y="479.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (89 samples, 0.16%)</title><rect x="24.2910%" y="453" width="0.1617%" height="15" fill="rgb(249,174,33)"/><text x="24.5410%" y="463.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (82 samples, 0.15%)</title><rect x="24.3037%" y="437" width="0.1490%" height="15" fill="rgb(233,201,37)"/><text x="24.5537%" y="447.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (307 samples, 0.56%)</title><rect x="23.8985%" y="501" width="0.5578%" height="15" fill="rgb(221,78,26)"/><text x="24.1485%" y="511.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (157 samples, 0.29%)</title><rect x="24.1711%" y="485" width="0.2852%" height="15" fill="rgb(250,127,30)"/><text x="24.4211%" y="495.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (388 samples, 0.70%)</title><rect x="23.8767%" y="517" width="0.7049%" height="15" fill="rgb(230,49,44)"/><text x="24.1267%" y="527.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (69 samples, 0.13%)</title><rect x="24.4563%" y="501" width="0.1254%" height="15" fill="rgb(229,67,23)"/><text x="24.7063%" y="511.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_one (84 samples, 0.15%)</title><rect x="24.6525%" y="453" width="0.1526%" height="15" fill="rgb(249,83,47)"/><text x="24.9025%" y="463.50"></text></g><g><title>webserver`core::mem::swap (94 samples, 0.17%)</title><rect x="24.6380%" y="469" width="0.1708%" height="15" fill="rgb(215,43,3)"/><text x="24.8880%" y="479.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (529 samples, 0.96%)</title><rect x="23.8495%" y="533" width="0.9611%" height="15" fill="rgb(238,154,13)"/><text x="24.0995%" y="543.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (122 samples, 0.22%)</title><rect x="24.5889%" y="517" width="0.2217%" height="15" fill="rgb(219,56,2)"/><text x="24.8389%" y="527.50"></text></g><g><title>webserver`core::mem::take (118 samples, 0.21%)</title><rect x="24.5962%" y="501" width="0.2144%" height="15" fill="rgb(233,0,4)"/><text x="24.8462%" y="511.50"></text></g><g><title>webserver`core::mem::replace (110 samples, 0.20%)</title><rect x="24.6107%" y="485" width="0.1999%" height="15" fill="rgb(235,30,7)"/><text x="24.8607%" y="495.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (552 samples, 1.00%)</title><rect x="23.8113%" y="565" width="1.0029%" height="15" fill="rgb(250,79,13)"/><text x="24.0613%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (547 samples, 0.99%)</title><rect x="23.8204%" y="549" width="0.9938%" height="15" fill="rgb(211,146,34)"/><text x="24.0704%" y="559.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (144 samples, 0.26%)</title><rect x="25.4029%" y="437" width="0.2616%" height="15" fill="rgb(228,22,38)"/><text x="25.6529%" y="447.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (194 samples, 0.35%)</title><rect x="25.3466%" y="453" width="0.3525%" height="15" fill="rgb(235,168,5)"/><text x="25.5966%" y="463.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (205 samples, 0.37%)</title><rect x="25.3320%" y="469" width="0.3724%" height="15" fill="rgb(221,155,16)"/><text x="25.5820%" y="479.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::parse (59 samples, 0.11%)</title><rect x="25.7045%" y="469" width="0.1072%" height="15" fill="rgb(215,215,53)"/><text x="25.9545%" y="479.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Time as core::str::FromStr&gt;::from_str (500 samples, 0.91%)</title><rect x="24.9759%" y="485" width="0.9084%" height="15" fill="rgb(223,4,10)"/><text x="25.2259%" y="495.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_str::_{{closure}} (574 samples, 1.04%)</title><rect x="24.8633%" y="549" width="1.0429%" height="15" fill="rgb(234,103,6)"/><text x="25.1133%" y="559.50"></text></g><g><title>webserver`serde::de::Visitor::visit_borrowed_str (570 samples, 1.04%)</title><rect x="24.8706%" y="533" width="1.0356%" height="15" fill="rgb(227,97,0)"/><text x="25.1206%" y="543.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::TimeVisitor as serde::de::Visitor&gt;::visit_str (562 samples, 1.02%)</title><rect x="24.8851%" y="517" width="1.0211%" height="15" fill="rgb(234,150,53)"/><text x="25.1351%" y="527.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::parse (531 samples, 0.96%)</title><rect x="24.9414%" y="501" width="0.9647%" height="15" fill="rgb(228,201,54)"/><text x="25.1914%" y="511.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_str (1,161 samples, 2.11%)</title><rect x="23.7986%" y="581" width="2.1093%" height="15" fill="rgb(222,22,37)"/><text x="24.0486%" y="591.50">w..</text></g><g><title>webserver`core::result::Result&lt;T,E&gt;::and_then (602 samples, 1.09%)</title><rect x="24.8142%" y="565" width="1.0937%" height="15" fill="rgb(237,53,32)"/><text x="25.0642%" y="575.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Time as serde::de::Deserialize&gt;::deserialize (1,171 samples, 2.13%)</title><rect x="23.7968%" y="597" width="2.1275%" height="15" fill="rgb(233,25,53)"/><text x="24.0468%" y="607.50">w..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (127 samples, 0.23%)</title><rect x="26.2459%" y="485" width="0.2307%" height="15" fill="rgb(210,40,34)"/><text x="26.4959%" y="495.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (71 samples, 0.13%)</title><rect x="26.3476%" y="469" width="0.1290%" height="15" fill="rgb(241,220,44)"/><text x="26.5976%" y="479.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.11%)</title><rect x="26.3640%" y="453" width="0.1126%" height="15" fill="rgb(235,28,35)"/><text x="26.6140%" y="463.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (81 samples, 0.15%)</title><rect x="26.5947%" y="453" width="0.1472%" height="15" fill="rgb(210,56,17)"/><text x="26.8447%" y="463.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (74 samples, 0.13%)</title><rect x="26.6074%" y="437" width="0.1344%" height="15" fill="rgb(224,130,29)"/><text x="26.8574%" y="447.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (70 samples, 0.13%)</title><rect x="26.6147%" y="421" width="0.1272%" height="15" fill="rgb(235,212,8)"/><text x="26.8647%" y="431.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (123 samples, 0.22%)</title><rect x="26.5202%" y="469" width="0.2235%" height="15" fill="rgb(223,33,50)"/><text x="26.7702%" y="479.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (310 samples, 0.56%)</title><rect x="26.1841%" y="501" width="0.5632%" height="15" fill="rgb(219,149,13)"/><text x="26.4341%" y="511.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (145 samples, 0.26%)</title><rect x="26.4839%" y="485" width="0.2634%" height="15" fill="rgb(250,156,29)"/><text x="26.7339%" y="495.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (77 samples, 0.14%)</title><rect x="26.7492%" y="501" width="0.1399%" height="15" fill="rgb(216,193,19)"/><text x="26.9992%" y="511.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (396 samples, 0.72%)</title><rect x="26.1714%" y="517" width="0.7195%" height="15" fill="rgb(216,135,14)"/><text x="26.4214%" y="527.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_one (78 samples, 0.14%)</title><rect x="26.9490%" y="453" width="0.1417%" height="15" fill="rgb(241,47,5)"/><text x="27.1990%" y="463.50"></text></g><g><title>webserver`core::mem::swap (84 samples, 0.15%)</title><rect x="26.9399%" y="469" width="0.1526%" height="15" fill="rgb(233,42,35)"/><text x="27.1899%" y="479.50"></text></g><g><title>webserver`core::mem::replace (103 samples, 0.19%)</title><rect x="26.9072%" y="485" width="0.1871%" height="15" fill="rgb(231,13,6)"/><text x="27.1572%" y="495.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (528 samples, 0.96%)</title><rect x="26.1387%" y="533" width="0.9593%" height="15" fill="rgb(207,181,40)"/><text x="26.3887%" y="543.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (114 samples, 0.21%)</title><rect x="26.8909%" y="517" width="0.2071%" height="15" fill="rgb(254,173,49)"/><text x="27.1409%" y="527.50"></text></g><g><title>webserver`core::mem::take (113 samples, 0.21%)</title><rect x="26.8927%" y="501" width="0.2053%" height="15" fill="rgb(221,1,38)"/><text x="27.1427%" y="511.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (558 samples, 1.01%)</title><rect x="26.0915%" y="565" width="1.0138%" height="15" fill="rgb(206,124,46)"/><text x="26.3415%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (556 samples, 1.01%)</title><rect x="26.0951%" y="549" width="1.0102%" height="15" fill="rgb(249,21,11)"/><text x="26.3451%" y="559.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u16 (779 samples, 1.42%)</title><rect x="25.9298%" y="581" width="1.4153%" height="15" fill="rgb(222,201,40)"/><text x="26.1798%" y="591.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for u16&gt;::deserialize (796 samples, 1.45%)</title><rect x="25.9243%" y="597" width="1.4462%" height="15" fill="rgb(235,61,29)"/><text x="26.1743%" y="607.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (147 samples, 0.27%)</title><rect x="27.5304%" y="501" width="0.2671%" height="15" fill="rgb(219,207,3)"/><text x="27.7804%" y="511.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (77 samples, 0.14%)</title><rect x="27.6576%" y="485" width="0.1399%" height="15" fill="rgb(222,56,46)"/><text x="27.9076%" y="495.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (67 samples, 0.12%)</title><rect x="27.6757%" y="469" width="0.1217%" height="15" fill="rgb(239,76,54)"/><text x="27.9257%" y="479.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (214 samples, 0.39%)</title><rect x="27.5122%" y="517" width="0.3888%" height="15" fill="rgb(231,124,27)"/><text x="27.7622%" y="527.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (268 samples, 0.49%)</title><rect x="27.4995%" y="533" width="0.4869%" height="15" fill="rgb(249,195,6)"/><text x="27.7495%" y="543.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (288 samples, 0.52%)</title><rect x="27.4668%" y="565" width="0.5232%" height="15" fill="rgb(237,174,47)"/><text x="27.7168%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (280 samples, 0.51%)</title><rect x="27.4813%" y="549" width="0.5087%" height="15" fill="rgb(206,201,31)"/><text x="27.7313%" y="559.50"></text></g><g><title>webserver`&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (76 samples, 0.14%)</title><rect x="28.0773%" y="549" width="0.1381%" height="15" fill="rgb(231,57,52)"/><text x="28.3273%" y="559.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::starts_with (66 samples, 0.12%)</title><rect x="28.0954%" y="533" width="0.1199%" height="15" fill="rgb(248,177,22)"/><text x="28.3454%" y="543.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u32 (464 samples, 0.84%)</title><rect x="27.3741%" y="581" width="0.8430%" height="15" fill="rgb(215,211,37)"/><text x="27.6241%" y="591.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::starts_with (80 samples, 0.15%)</title><rect x="28.0718%" y="565" width="0.1453%" height="15" fill="rgb(241,128,51)"/><text x="28.3218%" y="575.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for u32&gt;::deserialize (471 samples, 0.86%)</title><rect x="27.3705%" y="597" width="0.8557%" height="15" fill="rgb(227,165,31)"/><text x="27.6205%" y="607.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.12%)</title><rect x="28.4224%" y="485" width="0.1163%" height="15" fill="rgb(228,167,24)"/><text x="28.6724%" y="495.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.12%)</title><rect x="28.5514%" y="469" width="0.1163%" height="15" fill="rgb(228,143,12)"/><text x="28.8014%" y="479.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (166 samples, 0.30%)</title><rect x="28.3716%" y="501" width="0.3016%" height="15" fill="rgb(249,149,8)"/><text x="28.6216%" y="511.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (74 samples, 0.13%)</title><rect x="28.5387%" y="485" width="0.1344%" height="15" fill="rgb(243,35,44)"/><text x="28.7887%" y="495.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (59 samples, 0.11%)</title><rect x="28.6732%" y="501" width="0.1072%" height="15" fill="rgb(246,89,9)"/><text x="28.9232%" y="511.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (228 samples, 0.41%)</title><rect x="28.3679%" y="517" width="0.4142%" height="15" fill="rgb(233,213,13)"/><text x="28.6179%" y="527.50"></text></g><g><title>webserver`core::mem::replace (57 samples, 0.10%)</title><rect x="28.7894%" y="485" width="0.1036%" height="15" fill="rgb(233,141,41)"/><text x="29.0394%" y="495.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (302 samples, 0.55%)</title><rect x="28.3480%" y="533" width="0.5487%" height="15" fill="rgb(239,167,4)"/><text x="28.5980%" y="543.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (63 samples, 0.11%)</title><rect x="28.7822%" y="517" width="0.1145%" height="15" fill="rgb(209,217,16)"/><text x="29.0322%" y="527.50"></text></g><g><title>webserver`core::mem::take (60 samples, 0.11%)</title><rect x="28.7876%" y="501" width="0.1090%" height="15" fill="rgb(219,88,35)"/><text x="29.0376%" y="511.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (320 samples, 0.58%)</title><rect x="28.3189%" y="565" width="0.5814%" height="15" fill="rgb(220,193,23)"/><text x="28.5689%" y="575.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (315 samples, 0.57%)</title><rect x="28.3280%" y="549" width="0.5723%" height="15" fill="rgb(230,90,52)"/><text x="28.5780%" y="559.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::starts_with (94 samples, 0.17%)</title><rect x="29.0583%" y="533" width="0.1708%" height="15" fill="rgb(252,106,19)"/><text x="29.3083%" y="543.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u64 (552 samples, 1.00%)</title><rect x="28.2280%" y="581" width="1.0029%" height="15" fill="rgb(206,74,20)"/><text x="28.4780%" y="591.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::starts_with (107 samples, 0.19%)</title><rect x="29.0365%" y="565" width="0.1944%" height="15" fill="rgb(230,138,44)"/><text x="29.2865%" y="575.50"></text></g><g><title>webserver`&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (105 samples, 0.19%)</title><rect x="29.0402%" y="549" width="0.1908%" height="15" fill="rgb(235,182,43)"/><text x="29.2902%" y="559.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,167 samples, 7.57%)</title><rect x="21.6820%" y="613" width="7.5707%" height="15" fill="rgb(242,16,51)"/><text x="21.9320%" y="623.50">webserver`..</text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for u64&gt;::deserialize (565 samples, 1.03%)</title><rect x="28.2262%" y="597" width="1.0265%" height="15" fill="rgb(248,9,4)"/><text x="28.4762%" y="607.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (4,225 samples, 7.68%)</title><rect x="21.6075%" y="629" width="7.6761%" height="15" fill="rgb(210,31,22)"/><text x="21.8575%" y="639.50">webserver`&lt;..</text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_StopTime::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::StopTime&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (8,917 samples, 16.20%)</title><rect x="13.0921%" y="661" width="16.2007%" height="15" fill="rgb(239,54,39)"/><text x="13.3421%" y="671.50">webserver`&lt;transit_radar:..</text></g><g><title>webserver`serde::de::MapAccess::next_value (4,240 samples, 7.70%)</title><rect x="21.5894%" y="645" width="7.7033%" height="15" fill="rgb(230,99,41)"/><text x="21.8394%" y="655.50">webserver`s..</text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (8,965 samples, 16.29%)</title><rect x="13.0684%" y="677" width="16.2879%" height="15" fill="rgb(253,106,12)"/><text x="13.3184%" y="687.50">webserver`&lt;&amp;mut csv::dese..</text></g><g><title>webserver`csv::deserializer::deserialize_string_record (9,641 samples, 17.52%)</title><rect x="11.8512%" y="709" width="17.5160%" height="15" fill="rgb(213,46,41)"/><text x="12.1012%" y="719.50">webserver`csv::deserializer..</text></g><g><title>webserver`transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_StopTime::_&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::StopTime&gt;::deserialize (8,976 samples, 16.31%)</title><rect x="13.0594%" y="693" width="16.3078%" height="15" fill="rgb(215,133,35)"/><text x="13.3094%" y="703.50">webserver`transit_radar::..</text></g><g><title>webserver`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,402 samples, 27.98%)</title><rect x="1.3899%" y="741" width="27.9828%" height="15" fill="rgb(213,28,5)"/><text x="1.6399%" y="751.50">webserver`&lt;csv::reader::DeserializeRecordsIte..</text></g><g><title>webserver`csv::string_record::StringRecord::deserialize (9,659 samples, 17.55%)</title><rect x="11.8239%" y="725" width="17.5487%" height="15" fill="rgb(215,77,49)"/><text x="12.0739%" y="735.50">webserver`csv::string_recor..</text></g><g><title>webserver`core::iter::adapters::Peekable&lt;I&gt;::peek::_{{closure}} (15,411 samples, 28.00%)</title><rect x="1.3862%" y="757" width="27.9991%" height="15" fill="rgb(248,100,22)"/><text x="1.6362%" y="767.50">webserver`core::iter::adapters::Peekable&lt;I&gt;::..</text></g><g><title>webserver`core::option::Option&lt;T&gt;::get_or_insert_with (15,441 samples, 28.05%)</title><rect x="1.3372%" y="773" width="28.0536%" height="15" fill="rgb(208,67,9)"/><text x="1.5872%" y="783.50">webserver`core::option::Option&lt;T&gt;::get_or_ins..</text></g><g><title>webserver`core::iter::adapters::Peekable&lt;I&gt;::peek (15,461 samples, 28.09%)</title><rect x="1.3027%" y="789" width="28.0900%" height="15" fill="rgb(219,133,21)"/><text x="1.5527%" y="799.50">webserver`core::iter::adapters::Peekable&lt;I&gt;::..</text></g><g><title>webserver`&lt;transit_radar::gtfs::db::Iter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,664 samples, 28.46%)</title><rect x="0.9484%" y="805" width="28.4588%" height="15" fill="rgb(246,46,29)"/><text x="1.1984%" y="815.50">webserver`&lt;transit_radar::gtfs::db::Iter&lt;R&gt; as..</text></g><g><title>webserver`&lt;core::iter::adapters::SkipWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15,832 samples, 28.76%)</title><rect x="0.6486%" y="837" width="28.7640%" height="15" fill="rgb(246,185,52)"/><text x="0.8986%" y="847.50">webserver`&lt;core::iter::adapters::SkipWhile&lt;I,P..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (15,817 samples, 28.74%)</title><rect x="0.6759%" y="821" width="28.7368%" height="15" fill="rgb(252,136,11)"/><text x="0.9259%" y="831.50">webserver`core::iter::traits::iterator::Iterat..</text></g><g><title>webserver`&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15,857 samples, 28.81%)</title><rect x="0.6286%" y="853" width="28.8094%" height="15" fill="rgb(219,138,53)"/><text x="0.8786%" y="863.50">webserver`&lt;core::iter::adapters::ResultShunt&lt;I..</text></g><g><title>webserver`&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,883 samples, 28.86%)</title><rect x="0.6050%" y="885" width="28.8567%" height="15" fill="rgb(211,51,23)"/><text x="0.8550%" y="895.50">webserver`&lt;core::iter::adapters::ResultShunt&lt;I..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::find (15,870 samples, 28.83%)</title><rect x="0.6286%" y="869" width="28.8331%" height="15" fill="rgb(247,221,28)"/><text x="0.8786%" y="879.50">webserver`core::iter::traits::iterator::Iterat..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (91 samples, 0.17%)</title><rect x="29.5870%" y="773" width="0.1653%" height="15" fill="rgb(251,222,45)"/><text x="29.8370%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (100 samples, 0.18%)</title><rect x="29.5743%" y="789" width="0.1817%" height="15" fill="rgb(217,162,53)"/><text x="29.8243%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (116 samples, 0.21%)</title><rect x="29.5671%" y="805" width="0.2108%" height="15" fill="rgb(229,93,14)"/><text x="29.8171%" y="815.50"></text></g><g><title>webserver`alloc::alloc::realloc (124 samples, 0.23%)</title><rect x="29.5616%" y="821" width="0.2253%" height="15" fill="rgb(209,67,49)"/><text x="29.8116%" y="831.50"></text></g><g><title>webserver`&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (137 samples, 0.25%)</title><rect x="29.5434%" y="837" width="0.2489%" height="15" fill="rgb(213,87,29)"/><text x="29.7934%" y="847.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (256 samples, 0.47%)</title><rect x="29.5198%" y="853" width="0.4651%" height="15" fill="rgb(205,151,52)"/><text x="29.7698%" y="863.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (271 samples, 0.49%)</title><rect x="29.5035%" y="869" width="0.4924%" height="15" fill="rgb(253,215,39)"/><text x="29.7535%" y="879.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::reserve (273 samples, 0.50%)</title><rect x="29.5016%" y="885" width="0.4960%" height="15" fill="rgb(221,220,41)"/><text x="29.7516%" y="895.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::extend_desugared (16,300 samples, 29.61%)</title><rect x="0.4578%" y="901" width="29.6143%" height="15" fill="rgb(218,133,21)"/><text x="0.7078%" y="911.50">webserver`alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,313 samples, 29.64%)</title><rect x="0.4415%" y="917" width="29.6379%" height="15" fill="rgb(221,193,43)"/><text x="0.6915%" y="927.50">webserver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::Spe..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (16,415 samples, 29.82%)</title><rect x="0.4306%" y="933" width="29.8232%" height="15" fill="rgb(240,128,52)"/><text x="0.6806%" y="943.50">webserver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::Spe..</text></g><g><title>webserver`&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (16,426 samples, 29.84%)</title><rect x="0.4161%" y="981" width="29.8432%" height="15" fill="rgb(253,114,12)"/><text x="0.6661%" y="991.50">webserver`&lt;core::result::Result&lt;V,E&gt; as core::it..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::collect (16,425 samples, 29.84%)</title><rect x="0.4179%" y="965" width="29.8414%" height="15" fill="rgb(215,223,47)"/><text x="0.6679%" y="975.50">webserver`core::iter::traits::iterator::Iterator..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,421 samples, 29.83%)</title><rect x="0.4251%" y="949" width="29.8341%" height="15" fill="rgb(248,225,23)"/><text x="0.6751%" y="959.50">webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tra..</text></g><g><title>webserver`core::iter::adapters::process_results (16,429 samples, 29.85%)</title><rect x="0.4124%" y="997" width="29.8487%" height="15" fill="rgb(250,108,0)"/><text x="0.6624%" y="1007.50">webserver`core::iter::adapters::process_results</text></g><g><title>webserver`&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (16,431 samples, 29.85%)</title><rect x="0.4106%" y="1013" width="29.8523%" height="15" fill="rgb(228,208,7)"/><text x="0.6606%" y="1023.50">webserver`&lt;core::result::Result&lt;V,E&gt; as core::it..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::collect (16,433 samples, 29.86%)</title><rect x="0.4106%" y="1029" width="29.8559%" height="15" fill="rgb(244,45,10)"/><text x="0.6606%" y="1039.50">webserver`core::iter::traits::iterator::Iterator..</text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (64 samples, 0.12%)</title><rect x="30.3410%" y="1029" width="0.1163%" height="15" fill="rgb(207,125,25)"/><text x="30.5910%" y="1039.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (63 samples, 0.11%)</title><rect x="30.3428%" y="1013" width="0.1145%" height="15" fill="rgb(210,195,18)"/><text x="30.5928%" y="1023.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (63 samples, 0.11%)</title><rect x="30.3428%" y="997" width="0.1145%" height="15" fill="rgb(249,80,12)"/><text x="30.5928%" y="1007.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (61 samples, 0.11%)</title><rect x="30.3465%" y="981" width="0.1108%" height="15" fill="rgb(221,65,9)"/><text x="30.5965%" y="991.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (163 samples, 0.30%)</title><rect x="30.6244%" y="933" width="0.2961%" height="15" fill="rgb(235,49,36)"/><text x="30.8744%" y="943.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (234 samples, 0.43%)</title><rect x="30.5227%" y="949" width="0.4251%" height="15" fill="rgb(225,32,20)"/><text x="30.7727%" y="959.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (239 samples, 0.43%)</title><rect x="30.5191%" y="981" width="0.4342%" height="15" fill="rgb(215,141,46)"/><text x="30.7691%" y="991.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (237 samples, 0.43%)</title><rect x="30.5227%" y="965" width="0.4306%" height="15" fill="rgb(250,160,47)"/><text x="30.7727%" y="975.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.12%)</title><rect x="31.1150%" y="885" width="0.1181%" height="15" fill="rgb(216,222,40)"/><text x="31.3650%" y="895.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (131 samples, 0.24%)</title><rect x="31.0641%" y="901" width="0.2380%" height="15" fill="rgb(234,217,39)"/><text x="31.3141%" y="911.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (136 samples, 0.25%)</title><rect x="31.0641%" y="933" width="0.2471%" height="15" fill="rgb(207,178,40)"/><text x="31.3141%" y="943.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (136 samples, 0.25%)</title><rect x="31.0641%" y="917" width="0.2471%" height="15" fill="rgb(221,136,13)"/><text x="31.3141%" y="927.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::StopId as core::hash::Hash&gt;::hash (147 samples, 0.27%)</title><rect x="31.0459%" y="981" width="0.2671%" height="15" fill="rgb(249,199,10)"/><text x="31.2959%" y="991.50"></text></g><g><title>webserver`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (144 samples, 0.26%)</title><rect x="31.0514%" y="965" width="0.2616%" height="15" fill="rgb(249,222,13)"/><text x="31.3014%" y="975.50"></text></g><g><title>webserver`core::hash::Hasher::write_u64 (141 samples, 0.26%)</title><rect x="31.0568%" y="949" width="0.2562%" height="15" fill="rgb(244,185,38)"/><text x="31.3068%" y="959.50"></text></g><g><title>webserver`hashbrown::map::make_hash (451 samples, 0.82%)</title><rect x="30.4991%" y="997" width="0.8194%" height="15" fill="rgb(236,202,9)"/><text x="30.7491%" y="1007.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_set1_epi8 (63 samples, 0.11%)</title><rect x="31.7908%" y="965" width="0.1145%" height="15" fill="rgb(250,229,37)"/><text x="32.0408%" y="975.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_set_epi8 (56 samples, 0.10%)</title><rect x="31.8036%" y="949" width="0.1017%" height="15" fill="rgb(206,174,23)"/><text x="32.0536%" y="959.50"></text></g><g><title>webserver`hashbrown::raw::sse2::Group::match_byte (115 samples, 0.21%)</title><rect x="31.7000%" y="981" width="0.2089%" height="15" fill="rgb(211,33,43)"/><text x="31.9500%" y="991.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (345 samples, 0.63%)</title><rect x="31.3257%" y="997" width="0.6268%" height="15" fill="rgb(245,58,50)"/><text x="31.5757%" y="1007.50"></text></g><g><title>webserver`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (825 samples, 1.50%)</title><rect x="30.4609%" y="1013" width="1.4989%" height="15" fill="rgb(244,68,36)"/><text x="30.7109%" y="1023.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (834 samples, 1.52%)</title><rect x="30.4573%" y="1029" width="1.5152%" height="15" fill="rgb(232,229,15)"/><text x="30.7073%" y="1039.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve (65 samples, 0.12%)</title><rect x="32.0997%" y="981" width="0.1181%" height="15" fill="rgb(254,30,23)"/><text x="32.3497%" y="991.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (64 samples, 0.12%)</title><rect x="32.1015%" y="965" width="0.1163%" height="15" fill="rgb(235,160,14)"/><text x="32.3515%" y="975.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::resize (63 samples, 0.11%)</title><rect x="32.1033%" y="949" width="0.1145%" height="15" fill="rgb(212,155,44)"/><text x="32.3533%" y="959.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (139 samples, 0.25%)</title><rect x="31.9725%" y="1029" width="0.2525%" height="15" fill="rgb(226,2,50)"/><text x="32.2225%" y="1039.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (138 samples, 0.25%)</title><rect x="31.9743%" y="1013" width="0.2507%" height="15" fill="rgb(234,177,6)"/><text x="32.2243%" y="1023.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::insert (88 samples, 0.16%)</title><rect x="32.0652%" y="997" width="0.1599%" height="15" fill="rgb(217,24,9)"/><text x="32.3152%" y="1007.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::departure_lookup (17,693 samples, 32.15%)</title><rect x="0.0927%" y="1045" width="32.1451%" height="15" fill="rgb(220,13,46)"/><text x="0.3427%" y="1055.50">webserver`transit_radar::gtfs::db::GTFSData::departu..</text></g><g><title>webserver`&lt;csv::reader::DeserializeRecordsIntoIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.13%)</title><rect x="32.2396%" y="1029" width="0.1290%" height="15" fill="rgb(239,221,27)"/><text x="32.4896%" y="1039.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::load_calendar (108 samples, 0.20%)</title><rect x="32.2378%" y="1045" width="0.1962%" height="15" fill="rgb(222,198,25)"/><text x="32.4878%" y="1055.50"></text></g><g><title>webserver`&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.15%)</title><rect x="32.8537%" y="933" width="0.1508%" height="15" fill="rgb(211,99,13)"/><text x="33.1037%" y="943.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (78 samples, 0.14%)</title><rect x="33.0045%" y="933" width="0.1417%" height="15" fill="rgb(232,111,31)"/><text x="33.2545%" y="943.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all (256 samples, 0.47%)</title><rect x="32.7065%" y="965" width="0.4651%" height="15" fill="rgb(245,82,37)"/><text x="32.9565%" y="975.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (243 samples, 0.44%)</title><rect x="32.7301%" y="949" width="0.4415%" height="15" fill="rgb(227,149,46)"/><text x="32.9801%" y="959.50"></text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii (262 samples, 0.48%)</title><rect x="32.7065%" y="981" width="0.4760%" height="15" fill="rgb(218,36,50)"/><text x="32.9565%" y="991.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::validate (374 samples, 0.68%)</title><rect x="32.5394%" y="997" width="0.6795%" height="15" fill="rgb(226,80,48)"/><text x="32.7894%" y="1007.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::ge (61 samples, 0.11%)</title><rect x="33.6022%" y="965" width="0.1108%" height="15" fill="rgb(238,224,15)"/><text x="33.8522%" y="975.50"></text></g><g><title>webserver`csv_core::reader::Reader::read_record (310 samples, 0.56%)</title><rect x="33.3206%" y="981" width="0.5632%" height="15" fill="rgb(241,136,10)"/><text x="33.5706%" y="991.50"></text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_record (753 samples, 1.37%)</title><rect x="32.5176%" y="1013" width="1.3681%" height="15" fill="rgb(208,32,45)"/><text x="32.7676%" y="1023.50"></text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_byte_record (367 samples, 0.67%)</title><rect x="33.2189%" y="997" width="0.6668%" height="15" fill="rgb(207,135,9)"/><text x="33.4689%" y="1007.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Stop::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Stop&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (81 samples, 0.15%)</title><rect x="34.1346%" y="821" width="0.1472%" height="15" fill="rgb(206,86,44)"/><text x="34.3846%" y="831.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (69 samples, 0.13%)</title><rect x="34.1564%" y="805" width="0.1254%" height="15" fill="rgb(245,177,15)"/><text x="34.4064%" y="815.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (95 samples, 0.17%)</title><rect x="34.1146%" y="901" width="0.1726%" height="15" fill="rgb(206,64,50)"/><text x="34.3646%" y="911.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Stop::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Stop&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (93 samples, 0.17%)</title><rect x="34.1182%" y="885" width="0.1690%" height="15" fill="rgb(234,36,40)"/><text x="34.3682%" y="895.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (89 samples, 0.16%)</title><rect x="34.1255%" y="869" width="0.1617%" height="15" fill="rgb(213,64,8)"/><text x="34.3755%" y="879.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (89 samples, 0.16%)</title><rect x="34.1255%" y="853" width="0.1617%" height="15" fill="rgb(210,75,36)"/><text x="34.3755%" y="863.50"></text></g><g><title>webserver`serde::de::Visitor::visit_borrowed_bytes (87 samples, 0.16%)</title><rect x="34.1291%" y="837" width="0.1581%" height="15" fill="rgb(229,88,21)"/><text x="34.3791%" y="847.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.20%)</title><rect x="34.3726%" y="805" width="0.2017%" height="15" fill="rgb(252,204,47)"/><text x="34.6226%" y="815.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::and_then (161 samples, 0.29%)</title><rect x="34.3435%" y="853" width="0.2925%" height="15" fill="rgb(208,77,27)"/><text x="34.5935%" y="863.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::_{{closure}} (154 samples, 0.28%)</title><rect x="34.3562%" y="837" width="0.2798%" height="15" fill="rgb(221,76,26)"/><text x="34.6062%" y="847.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.27%)</title><rect x="34.3617%" y="821" width="0.2743%" height="15" fill="rgb(225,139,18)"/><text x="34.6117%" y="831.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (168 samples, 0.31%)</title><rect x="34.3417%" y="869" width="0.3052%" height="15" fill="rgb(230,137,11)"/><text x="34.5917%" y="879.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (198 samples, 0.36%)</title><rect x="34.3126%" y="901" width="0.3597%" height="15" fill="rgb(212,28,1)"/><text x="34.5626%" y="911.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (196 samples, 0.36%)</title><rect x="34.3162%" y="885" width="0.3561%" height="15" fill="rgb(248,164,17)"/><text x="34.5662%" y="895.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (342 samples, 0.62%)</title><rect x="34.0691%" y="917" width="0.6214%" height="15" fill="rgb(222,171,42)"/><text x="34.3191%" y="927.50"></text></g><g><title>webserver`serde::de::MapAccess::next_key (345 samples, 0.63%)</title><rect x="34.0673%" y="933" width="0.6268%" height="15" fill="rgb(243,84,45)"/><text x="34.3173%" y="943.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.11%)</title><rect x="34.7341%" y="805" width="0.1072%" height="15" fill="rgb(252,49,23)"/><text x="34.9841%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (77 samples, 0.14%)</title><rect x="34.7232%" y="853" width="0.1399%" height="15" fill="rgb(215,19,7)"/><text x="34.9732%" y="863.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (73 samples, 0.13%)</title><rect x="34.7305%" y="837" width="0.1326%" height="15" fill="rgb(238,81,41)"/><text x="34.9805%" y="847.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.13%)</title><rect x="34.7323%" y="821" width="0.1308%" height="15" fill="rgb(210,199,37)"/><text x="34.9823%" y="831.50"></text></g><g><title>webserver`&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (81 samples, 0.15%)</title><rect x="34.7178%" y="885" width="0.1472%" height="15" fill="rgb(244,192,49)"/><text x="34.9678%" y="895.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (80 samples, 0.15%)</title><rect x="34.7196%" y="869" width="0.1453%" height="15" fill="rgb(226,211,11)"/><text x="34.9696%" y="879.50"></text></g><g><title>webserver`&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (61 samples, 0.11%)</title><rect x="34.9975%" y="821" width="0.1108%" height="15" fill="rgb(236,162,54)"/><text x="35.2475%" y="831.50"></text></g><g><title>webserver`alloc::str::_&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (60 samples, 0.11%)</title><rect x="34.9994%" y="805" width="0.1090%" height="15" fill="rgb(220,229,9)"/><text x="35.2494%" y="815.50"></text></g><g><title>webserver`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (59 samples, 0.11%)</title><rect x="35.0012%" y="789" width="0.1072%" height="15" fill="rgb(250,87,22)"/><text x="35.2512%" y="799.50"></text></g><g><title>webserver`alloc::slice::_&lt;impl [T]&gt;::to_vec (59 samples, 0.11%)</title><rect x="35.0012%" y="773" width="0.1072%" height="15" fill="rgb(239,43,17)"/><text x="35.2512%" y="783.50"></text></g><g><title>webserver`alloc::slice::hack::to_vec (59 samples, 0.11%)</title><rect x="35.0012%" y="757" width="0.1072%" height="15" fill="rgb(231,177,25)"/><text x="35.2512%" y="767.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_string (82 samples, 0.15%)</title><rect x="34.9612%" y="869" width="0.1490%" height="15" fill="rgb(219,179,1)"/><text x="35.2112%" y="879.50"></text></g><g><title>webserver`core::result::Result&lt;T,E&gt;::and_then (63 samples, 0.11%)</title><rect x="34.9957%" y="853" width="0.1145%" height="15" fill="rgb(238,219,53)"/><text x="35.2457%" y="863.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_string::_{{closure}} (62 samples, 0.11%)</title><rect x="34.9975%" y="837" width="0.1126%" height="15" fill="rgb(232,167,36)"/><text x="35.2475%" y="847.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (83 samples, 0.15%)</title><rect x="34.9612%" y="885" width="0.1508%" height="15" fill="rgb(244,19,51)"/><text x="35.2112%" y="895.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.15%)</title><rect x="35.3082%" y="741" width="0.1453%" height="15" fill="rgb(224,6,22)"/><text x="35.5582%" y="751.50"></text></g><g><title>webserver`core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (79 samples, 0.14%)</title><rect x="35.3100%" y="725" width="0.1435%" height="15" fill="rgb(224,145,5)"/><text x="35.5600%" y="735.50"></text></g><g><title>webserver`&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (94 samples, 0.17%)</title><rect x="35.3064%" y="757" width="0.1708%" height="15" fill="rgb(234,130,49)"/><text x="35.5564%" y="767.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::count (101 samples, 0.18%)</title><rect x="35.2991%" y="789" width="0.1835%" height="15" fill="rgb(254,6,2)"/><text x="35.5491%" y="799.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::fold (100 samples, 0.18%)</title><rect x="35.3010%" y="773" width="0.1817%" height="15" fill="rgb(208,96,46)"/><text x="35.5510%" y="783.50"></text></g><g><title>webserver`core::num::dec2flt::algorithm::fast_path (58 samples, 0.11%)</title><rect x="35.4899%" y="789" width="0.1054%" height="15" fill="rgb(239,3,39)"/><text x="35.7399%" y="799.50"></text></g><g><title>webserver`core::num::dec2flt::dec2flt (191 samples, 0.35%)</title><rect x="35.2901%" y="821" width="0.3470%" height="15" fill="rgb(233,210,1)"/><text x="35.5401%" y="831.50"></text></g><g><title>webserver`core::num::dec2flt::convert (189 samples, 0.34%)</title><rect x="35.2937%" y="805" width="0.3434%" height="15" fill="rgb(244,137,37)"/><text x="35.5437%" y="815.50"></text></g><g><title>webserver`core::num::dec2flt::_&lt;impl core::str::FromStr for f64&gt;::from_str (194 samples, 0.35%)</title><rect x="35.2901%" y="837" width="0.3525%" height="15" fill="rgb(240,136,2)"/><text x="35.5401%" y="847.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (243 samples, 0.44%)</title><rect x="35.2047%" y="869" width="0.4415%" height="15" fill="rgb(239,18,37)"/><text x="35.4547%" y="879.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::parse (197 samples, 0.36%)</title><rect x="35.2882%" y="853" width="0.3579%" height="15" fill="rgb(218,185,22)"/><text x="35.5382%" y="863.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for f64&gt;::deserialize (245 samples, 0.45%)</title><rect x="35.2028%" y="885" width="0.4451%" height="15" fill="rgb(225,218,4)"/><text x="35.4528%" y="895.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (549 samples, 1.00%)</title><rect x="34.7123%" y="901" width="0.9974%" height="15" fill="rgb(230,182,32)"/><text x="34.9623%" y="911.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (561 samples, 1.02%)</title><rect x="34.6978%" y="917" width="1.0192%" height="15" fill="rgb(242,56,43)"/><text x="34.9478%" y="927.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Stop::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Stop&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (952 samples, 1.73%)</title><rect x="33.9892%" y="949" width="1.7296%" height="15" fill="rgb(233,99,24)"/><text x="34.2392%" y="959.50"></text></g><g><title>webserver`serde::de::MapAccess::next_value (564 samples, 1.02%)</title><rect x="34.6941%" y="933" width="1.0247%" height="15" fill="rgb(234,209,42)"/><text x="34.9441%" y="943.50"></text></g><g><title>webserver`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,771 samples, 3.22%)</title><rect x="32.5121%" y="1029" width="3.2176%" height="15" fill="rgb(227,7,12)"/><text x="32.7621%" y="1039.50">web..</text></g><g><title>webserver`csv::string_record::StringRecord::deserialize (1,015 samples, 1.84%)</title><rect x="33.8856%" y="1013" width="1.8441%" height="15" fill="rgb(245,203,43)"/><text x="34.1356%" y="1023.50">w..</text></g><g><title>webserver`csv::deserializer::deserialize_string_record (1,014 samples, 1.84%)</title><rect x="33.8875%" y="997" width="1.8423%" height="15" fill="rgb(238,205,33)"/><text x="34.1375%" y="1007.50">w..</text></g><g><title>webserver`transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Stop::_&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Stop&gt;::deserialize (961 samples, 1.75%)</title><rect x="33.9838%" y="981" width="1.7460%" height="15" fill="rgb(231,56,7)"/><text x="34.2338%" y="991.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (960 samples, 1.74%)</title><rect x="33.9856%" y="965" width="1.7442%" height="15" fill="rgb(244,186,29)"/><text x="34.2356%" y="975.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve (76 samples, 0.14%)</title><rect x="35.9150%" y="981" width="0.1381%" height="15" fill="rgb(234,111,31)"/><text x="36.1650%" y="991.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (76 samples, 0.14%)</title><rect x="35.9150%" y="965" width="0.1381%" height="15" fill="rgb(241,149,10)"/><text x="36.1650%" y="975.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::resize (75 samples, 0.14%)</title><rect x="35.9169%" y="949" width="0.1363%" height="15" fill="rgb(249,206,44)"/><text x="36.1669%" y="959.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (179 samples, 0.33%)</title><rect x="35.7352%" y="1013" width="0.3252%" height="15" fill="rgb(251,153,30)"/><text x="35.9852%" y="1023.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::insert (101 samples, 0.18%)</title><rect x="35.8769%" y="997" width="0.1835%" height="15" fill="rgb(239,152,38)"/><text x="36.1269%" y="1007.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (181 samples, 0.33%)</title><rect x="35.7334%" y="1029" width="0.3288%" height="15" fill="rgb(249,139,47)"/><text x="35.9834%" y="1039.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::generate_stops_by_parent_id (102 samples, 0.19%)</title><rect x="36.0622%" y="1029" width="0.1853%" height="15" fill="rgb(244,64,35)"/><text x="36.3122%" y="1039.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::load_stops_by_id (2,059 samples, 3.74%)</title><rect x="32.5085%" y="1045" width="3.7408%" height="15" fill="rgb(216,46,15)"/><text x="32.7585%" y="1055.50">webs..</text></g><g><title>webserver`&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.19%)</title><rect x="36.5655%" y="933" width="0.1926%" height="15" fill="rgb(250,74,19)"/><text x="36.8155%" y="943.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (70 samples, 0.13%)</title><rect x="36.7581%" y="933" width="0.1272%" height="15" fill="rgb(249,42,33)"/><text x="37.0081%" y="943.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all (291 samples, 0.53%)</title><rect x="36.4056%" y="965" width="0.5287%" height="15" fill="rgb(242,149,17)"/><text x="36.6556%" y="975.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (281 samples, 0.51%)</title><rect x="36.4238%" y="949" width="0.5105%" height="15" fill="rgb(244,29,21)"/><text x="36.6738%" y="959.50"></text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii (297 samples, 0.54%)</title><rect x="36.4038%" y="981" width="0.5396%" height="15" fill="rgb(220,130,37)"/><text x="36.6538%" y="991.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::validate (364 samples, 0.66%)</title><rect x="36.3547%" y="997" width="0.6613%" height="15" fill="rgb(211,67,2)"/><text x="36.6047%" y="1007.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::ge (76 samples, 0.14%)</title><rect x="37.5302%" y="965" width="0.1381%" height="15" fill="rgb(235,68,52)"/><text x="37.7802%" y="975.50"></text></g><g><title>webserver`csv_core::reader::Reader::read_record (355 samples, 0.64%)</title><rect x="37.2758%" y="981" width="0.6450%" height="15" fill="rgb(246,142,3)"/><text x="37.5258%" y="991.50"></text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_byte_record (497 samples, 0.90%)</title><rect x="37.0197%" y="997" width="0.9030%" height="15" fill="rgb(241,25,7)"/><text x="37.2697%" y="1007.50"></text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_record (889 samples, 1.62%)</title><rect x="36.3093%" y="1013" width="1.6152%" height="15" fill="rgb(242,119,39)"/><text x="36.5593%" y="1023.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (56 samples, 0.10%)</title><rect x="37.9517%" y="981" width="0.1017%" height="15" fill="rgb(241,98,45)"/><text x="38.2017%" y="991.50"></text></g><g><title>webserver`&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (58 samples, 0.11%)</title><rect x="38.0843%" y="933" width="0.1054%" height="15" fill="rgb(254,28,30)"/><text x="38.3343%" y="943.50"></text></g><g><title>webserver`&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (66 samples, 0.12%)</title><rect x="38.0716%" y="965" width="0.1199%" height="15" fill="rgb(241,142,54)"/><text x="38.3216%" y="975.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::iter (59 samples, 0.11%)</title><rect x="38.0843%" y="949" width="0.1072%" height="15" fill="rgb(222,85,15)"/><text x="38.3343%" y="959.50"></text></g><g><title>webserver`csv::string_record::StringRecord::iter (69 samples, 0.13%)</title><rect x="38.0698%" y="981" width="0.1254%" height="15" fill="rgb(210,85,47)"/><text x="38.3198%" y="991.50"></text></g><g><title>webserver`&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (109 samples, 0.20%)</title><rect x="38.5731%" y="789" width="0.1980%" height="15" fill="rgb(224,206,25)"/><text x="38.8231%" y="799.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (189 samples, 0.34%)</title><rect x="38.4350%" y="901" width="0.3434%" height="15" fill="rgb(243,201,19)"/><text x="38.6850%" y="911.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Transfer::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Transfer&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (186 samples, 0.34%)</title><rect x="38.4404%" y="885" width="0.3379%" height="15" fill="rgb(236,59,4)"/><text x="38.6904%" y="895.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (182 samples, 0.33%)</title><rect x="38.4477%" y="869" width="0.3307%" height="15" fill="rgb(254,179,45)"/><text x="38.6977%" y="879.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (179 samples, 0.33%)</title><rect x="38.4532%" y="853" width="0.3252%" height="15" fill="rgb(226,14,10)"/><text x="38.7032%" y="863.50"></text></g><g><title>webserver`serde::de::Visitor::visit_borrowed_bytes (173 samples, 0.31%)</title><rect x="38.4641%" y="837" width="0.3143%" height="15" fill="rgb(244,27,41)"/><text x="38.7141%" y="847.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Transfer::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Transfer&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (171 samples, 0.31%)</title><rect x="38.4677%" y="821" width="0.3107%" height="15" fill="rgb(235,35,32)"/><text x="38.7177%" y="831.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (148 samples, 0.27%)</title><rect x="38.5095%" y="805" width="0.2689%" height="15" fill="rgb(218,68,31)"/><text x="38.7595%" y="815.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (90 samples, 0.16%)</title><rect x="38.9891%" y="789" width="0.1635%" height="15" fill="rgb(207,120,37)"/><text x="39.2391%" y="799.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (61 samples, 0.11%)</title><rect x="39.2180%" y="757" width="0.1108%" height="15" fill="rgb(227,98,0)"/><text x="39.4680%" y="767.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (59 samples, 0.11%)</title><rect x="39.2217%" y="741" width="0.1072%" height="15" fill="rgb(207,7,3)"/><text x="39.4717%" y="751.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (90 samples, 0.16%)</title><rect x="39.1672%" y="773" width="0.1635%" height="15" fill="rgb(206,98,19)"/><text x="39.4172%" y="783.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 0.40%)</title><rect x="38.9328%" y="805" width="0.3997%" height="15" fill="rgb(217,5,26)"/><text x="39.1828%" y="815.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (98 samples, 0.18%)</title><rect x="39.1544%" y="789" width="0.1780%" height="15" fill="rgb(235,190,38)"/><text x="39.4044%" y="799.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::and_then (302 samples, 0.55%)</title><rect x="38.8910%" y="853" width="0.5487%" height="15" fill="rgb(247,86,24)"/><text x="39.1410%" y="863.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::_{{closure}} (291 samples, 0.53%)</title><rect x="38.9110%" y="837" width="0.5287%" height="15" fill="rgb(205,101,16)"/><text x="39.1610%" y="847.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (286 samples, 0.52%)</title><rect x="38.9201%" y="821" width="0.5196%" height="15" fill="rgb(246,168,33)"/><text x="39.1701%" y="831.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (59 samples, 0.11%)</title><rect x="39.3325%" y="805" width="0.1072%" height="15" fill="rgb(231,114,1)"/><text x="39.5825%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (315 samples, 0.57%)</title><rect x="38.8765%" y="869" width="0.5723%" height="15" fill="rgb(207,184,53)"/><text x="39.1265%" y="879.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (374 samples, 0.68%)</title><rect x="38.8383%" y="885" width="0.6795%" height="15" fill="rgb(224,95,51)"/><text x="39.0883%" y="895.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (383 samples, 0.70%)</title><rect x="38.8256%" y="901" width="0.6958%" height="15" fill="rgb(212,188,45)"/><text x="39.0756%" y="911.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (681 samples, 1.24%)</title><rect x="38.3732%" y="917" width="1.2373%" height="15" fill="rgb(223,154,38)"/><text x="38.6232%" y="927.50"></text></g><g><title>webserver`serde::de::MapAccess::next_key (695 samples, 1.26%)</title><rect x="38.3678%" y="933" width="1.2627%" height="15" fill="rgb(251,22,52)"/><text x="38.6178%" y="943.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (56 samples, 0.10%)</title><rect x="39.6722%" y="869" width="0.1017%" height="15" fill="rgb(229,209,22)"/><text x="39.9222%" y="879.50"></text></g><g><title>webserver`&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (57 samples, 0.10%)</title><rect x="39.6722%" y="885" width="0.1036%" height="15" fill="rgb(234,138,34)"/><text x="39.9222%" y="895.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.13%)</title><rect x="39.8212%" y="789" width="0.1326%" height="15" fill="rgb(212,95,11)"/><text x="40.0712%" y="799.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.20%)</title><rect x="39.8176%" y="805" width="0.1962%" height="15" fill="rgb(240,179,47)"/><text x="40.0676%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (111 samples, 0.20%)</title><rect x="39.8140%" y="821" width="0.2017%" height="15" fill="rgb(240,163,11)"/><text x="40.0640%" y="831.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::infer_deserialize (178 samples, 0.32%)</title><rect x="39.7831%" y="837" width="0.3234%" height="15" fill="rgb(236,37,12)"/><text x="40.0331%" y="847.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::infer_deserialize (180 samples, 0.33%)</title><rect x="39.7813%" y="853" width="0.3270%" height="15" fill="rgb(232,164,16)"/><text x="40.0313%" y="863.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_any (182 samples, 0.33%)</title><rect x="39.7794%" y="869" width="0.3307%" height="15" fill="rgb(244,205,15)"/><text x="40.0294%" y="879.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::StopId as serde::de::Deserialize&gt;::deserialize (186 samples, 0.34%)</title><rect x="39.7758%" y="885" width="0.3379%" height="15" fill="rgb(223,117,47)"/><text x="40.0258%" y="895.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (57 samples, 0.10%)</title><rect x="40.3372%" y="741" width="0.1036%" height="15" fill="rgb(244,107,35)"/><text x="40.5872%" y="751.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (57 samples, 0.10%)</title><rect x="40.4517%" y="725" width="0.1036%" height="15" fill="rgb(205,140,8)"/><text x="40.7017%" y="735.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (138 samples, 0.25%)</title><rect x="40.3063%" y="757" width="0.2507%" height="15" fill="rgb(228,84,46)"/><text x="40.5563%" y="767.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (64 samples, 0.12%)</title><rect x="40.4408%" y="741" width="0.1163%" height="15" fill="rgb(254,188,9)"/><text x="40.6908%" y="751.50"></text></g><g><title>webserver`core::iter::adapters::Peekable&lt;I&gt;::peek (206 samples, 0.37%)</title><rect x="40.2445%" y="821" width="0.3743%" height="15" fill="rgb(206,112,54)"/><text x="40.4945%" y="831.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::get_or_insert_with (197 samples, 0.36%)</title><rect x="40.2609%" y="805" width="0.3579%" height="15" fill="rgb(216,84,49)"/><text x="40.5109%" y="815.50"></text></g><g><title>webserver`core::iter::adapters::Peekable&lt;I&gt;::peek::_{{closure}} (181 samples, 0.33%)</title><rect x="40.2900%" y="789" width="0.3288%" height="15" fill="rgb(214,194,35)"/><text x="40.5400%" y="799.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (178 samples, 0.32%)</title><rect x="40.2954%" y="773" width="0.3234%" height="15" fill="rgb(249,28,3)"/><text x="40.5454%" y="783.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::peek_field (232 samples, 0.42%)</title><rect x="40.2373%" y="837" width="0.4215%" height="15" fill="rgb(222,56,52)"/><text x="40.4873%" y="847.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::peek_field (234 samples, 0.43%)</title><rect x="40.2355%" y="853" width="0.4251%" height="15" fill="rgb(245,217,50)"/><text x="40.4855%" y="863.50"></text></g><g><title>webserver`&lt;&lt;transit_radar::gtfs::model::id::RouteId as serde::de::Deserialize&gt;::deserialize::StringOrInt as serde::de::Visitor&gt;::visit_str (59 samples, 0.11%)</title><rect x="40.6806%" y="773" width="0.1072%" height="15" fill="rgb(213,201,24)"/><text x="40.9306%" y="783.50"></text></g><g><title>webserver`csv::deserializer::try_negative_integer128 (101 samples, 0.18%)</title><rect x="40.8168%" y="773" width="0.1835%" height="15" fill="rgb(248,116,28)"/><text x="41.0668%" y="783.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::parse (99 samples, 0.18%)</title><rect x="40.8205%" y="757" width="0.1799%" height="15" fill="rgb(219,72,43)"/><text x="41.0705%" y="767.50"></text></g><g><title>webserver`core::num::_&lt;impl core::str::FromStr for i128&gt;::from_str (99 samples, 0.18%)</title><rect x="40.8205%" y="741" width="0.1799%" height="15" fill="rgb(209,138,14)"/><text x="41.0705%" y="751.50"></text></g><g><title>webserver`core::num::from_str_radix (99 samples, 0.18%)</title><rect x="40.8205%" y="725" width="0.1799%" height="15" fill="rgb(222,18,33)"/><text x="41.0705%" y="735.50"></text></g><g><title>webserver`__muloti4 (97 samples, 0.18%)</title><rect x="40.8241%" y="709" width="0.1762%" height="15" fill="rgb(213,199,7)"/><text x="41.0741%" y="719.50"></text></g><g><title>webserver`__udivmodti4 (90 samples, 0.16%)</title><rect x="40.8368%" y="693" width="0.1635%" height="15" fill="rgb(250,110,10)"/><text x="41.0868%" y="703.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::infer_deserialize (188 samples, 0.34%)</title><rect x="40.6733%" y="789" width="0.3416%" height="15" fill="rgb(248,123,6)"/><text x="40.9233%" y="799.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::RouteId as serde::de::Deserialize&gt;::deserialize (191 samples, 0.35%)</title><rect x="40.6715%" y="837" width="0.3470%" height="15" fill="rgb(206,91,31)"/><text x="40.9215%" y="847.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_any (190 samples, 0.35%)</title><rect x="40.6733%" y="821" width="0.3452%" height="15" fill="rgb(211,154,13)"/><text x="40.9233%" y="831.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::infer_deserialize (190 samples, 0.35%)</title><rect x="40.6733%" y="805" width="0.3452%" height="15" fill="rgb(225,148,7)"/><text x="40.9233%" y="815.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Duration as serde::de::Deserialize&gt;::deserialize (59 samples, 0.11%)</title><rect x="41.0185%" y="837" width="0.1072%" height="15" fill="rgb(220,160,43)"/><text x="41.2685%" y="847.50"></text></g><g><title>webserver`&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (257 samples, 0.47%)</title><rect x="40.6679%" y="853" width="0.4669%" height="15" fill="rgb(213,52,39)"/><text x="40.9179%" y="863.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (573 samples, 1.04%)</title><rect x="40.1156%" y="869" width="1.0410%" height="15" fill="rgb(243,137,7)"/><text x="40.3656%" y="879.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (829 samples, 1.51%)</title><rect x="39.6559%" y="901" width="1.5061%" height="15" fill="rgb(230,79,13)"/><text x="39.9059%" y="911.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (577 samples, 1.05%)</title><rect x="40.1137%" y="885" width="1.0483%" height="15" fill="rgb(247,105,23)"/><text x="40.3637%" y="895.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (842 samples, 1.53%)</title><rect x="39.6377%" y="917" width="1.5298%" height="15" fill="rgb(223,179,41)"/><text x="39.8877%" y="927.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,638 samples, 2.98%)</title><rect x="38.1970%" y="965" width="2.9760%" height="15" fill="rgb(218,9,34)"/><text x="38.4470%" y="975.50">web..</text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Transfer::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Transfer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,631 samples, 2.96%)</title><rect x="38.2097%" y="949" width="2.9632%" height="15" fill="rgb(222,106,8)"/><text x="38.4597%" y="959.50">web..</text></g><g><title>webserver`serde::de::MapAccess::next_value (849 samples, 1.54%)</title><rect x="39.6305%" y="933" width="1.5425%" height="15" fill="rgb(211,220,0)"/><text x="39.8805%" y="943.50"></text></g><g><title>webserver`csv::deserializer::deserialize_string_record (1,786 samples, 3.24%)</title><rect x="37.9317%" y="997" width="3.2449%" height="15" fill="rgb(229,52,16)"/><text x="38.1817%" y="1007.50">web..</text></g><g><title>webserver`transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Transfer::_&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Transfer&gt;::deserialize (1,641 samples, 2.98%)</title><rect x="38.1952%" y="981" width="2.9814%" height="15" fill="rgb(212,155,18)"/><text x="38.4452%" y="991.50">web..</text></g><g><title>webserver`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,700 samples, 4.91%)</title><rect x="36.2766%" y="1029" width="4.9054%" height="15" fill="rgb(242,21,14)"/><text x="36.5266%" y="1039.50">webser..</text></g><g><title>webserver`csv::string_record::StringRecord::deserialize (1,793 samples, 3.26%)</title><rect x="37.9245%" y="1013" width="3.2576%" height="15" fill="rgb(222,19,48)"/><text x="38.1745%" y="1023.50">web..</text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (78 samples, 0.14%)</title><rect x="41.2020%" y="981" width="0.1417%" height="15" fill="rgb(232,45,27)"/><text x="41.4520%" y="991.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::reserve (83 samples, 0.15%)</title><rect x="41.1966%" y="1013" width="0.1508%" height="15" fill="rgb(249,103,42)"/><text x="41.4466%" y="1023.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (82 samples, 0.15%)</title><rect x="41.1984%" y="997" width="0.1490%" height="15" fill="rgb(246,81,33)"/><text x="41.4484%" y="1007.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::push (106 samples, 0.19%)</title><rect x="41.1820%" y="1029" width="0.1926%" height="15" fill="rgb(252,33,42)"/><text x="41.4320%" y="1039.50"></text></g><g><title>webserver`hashbrown::map::make_hash (87 samples, 0.16%)</title><rect x="41.5181%" y="997" width="0.1581%" height="15" fill="rgb(209,212,41)"/><text x="41.7681%" y="1007.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (94 samples, 0.17%)</title><rect x="41.6798%" y="997" width="0.1708%" height="15" fill="rgb(207,154,6)"/><text x="41.9298%" y="1007.50"></text></g><g><title>webserver`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (229 samples, 0.42%)</title><rect x="41.4400%" y="1013" width="0.4161%" height="15" fill="rgb(223,64,47)"/><text x="41.6900%" y="1023.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (232 samples, 0.42%)</title><rect x="41.4364%" y="1029" width="0.4215%" height="15" fill="rgb(211,161,38)"/><text x="41.6864%" y="1039.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::load_transfers_of_stop (3,090 samples, 5.61%)</title><rect x="36.2493%" y="1045" width="5.6140%" height="15" fill="rgb(219,138,40)"/><text x="36.4993%" y="1055.50">webserv..</text></g><g><title>webserver`&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.19%)</title><rect x="42.1595%" y="933" width="0.1871%" height="15" fill="rgb(241,228,46)"/><text x="42.4095%" y="943.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.15%)</title><rect x="42.1958%" y="917" width="0.1508%" height="15" fill="rgb(223,209,38)"/><text x="42.4458%" y="927.50"></text></g><g><title>webserver`bstr::utf8::validate::fast (115 samples, 0.21%)</title><rect x="42.3575%" y="901" width="0.2089%" height="15" fill="rgb(236,164,45)"/><text x="42.6075%" y="911.50"></text></g><g><title>webserver`bstr::utf8::validate (117 samples, 0.21%)</title><rect x="42.3575%" y="917" width="0.2126%" height="15" fill="rgb(231,15,5)"/><text x="42.6075%" y="927.50"></text></g><g><title>webserver`bstr::ext_slice::ByteSlice::to_str (131 samples, 0.24%)</title><rect x="42.3484%" y="933" width="0.2380%" height="15" fill="rgb(252,35,15)"/><text x="42.5984%" y="943.50"></text></g><g><title>webserver`&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (256 samples, 0.47%)</title><rect x="43.0788%" y="885" width="0.4651%" height="15" fill="rgb(248,181,18)"/><text x="43.3288%" y="895.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all::check::_{{closure}} (227 samples, 0.41%)</title><rect x="43.5439%" y="885" width="0.4124%" height="15" fill="rgb(233,39,42)"/><text x="43.7939%" y="895.50"></text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii::_{{closure}} (127 samples, 0.23%)</title><rect x="43.7256%" y="869" width="0.2307%" height="15" fill="rgb(238,110,33)"/><text x="43.9756%" y="879.50"></text></g><g><title>webserver`core::num::_&lt;impl u8&gt;::is_ascii (84 samples, 0.15%)</title><rect x="43.8037%" y="853" width="0.1526%" height="15" fill="rgb(233,195,10)"/><text x="44.0537%" y="863.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::all (790 samples, 1.44%)</title><rect x="42.6137%" y="917" width="1.4353%" height="15" fill="rgb(254,105,3)"/><text x="42.8637%" y="927.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (763 samples, 1.39%)</title><rect x="42.6627%" y="901" width="1.3862%" height="15" fill="rgb(221,225,9)"/><text x="42.9127%" y="911.50"></text></g><g><title>webserver`core::slice::_&lt;impl [u8]&gt;::is_ascii (808 samples, 1.47%)</title><rect x="42.6046%" y="933" width="1.4680%" height="15" fill="rgb(224,227,45)"/><text x="42.8546%" y="943.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::validate (1,164 samples, 2.11%)</title><rect x="42.0759%" y="949" width="2.1148%" height="15" fill="rgb(229,198,43)"/><text x="42.3259%" y="959.50">w..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (82 samples, 0.15%)</title><rect x="44.2488%" y="933" width="0.1490%" height="15" fill="rgb(206,209,35)"/><text x="44.4988%" y="943.50"></text></g><g><title>webserver`core::cmp::PartialEq::ne (64 samples, 0.12%)</title><rect x="45.6387%" y="901" width="0.1163%" height="15" fill="rgb(245,195,53)"/><text x="45.8887%" y="911.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (61 samples, 0.11%)</title><rect x="45.7641%" y="901" width="0.1108%" height="15" fill="rgb(240,92,26)"/><text x="46.0141%" y="911.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::ge (217 samples, 0.39%)</title><rect x="45.5533%" y="917" width="0.3943%" height="15" fill="rgb(207,40,23)"/><text x="45.8033%" y="927.50"></text></g><g><title>webserver`&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::gt (73 samples, 0.13%)</title><rect x="45.9476%" y="917" width="0.1326%" height="15" fill="rgb(223,111,35)"/><text x="46.1976%" y="927.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::len (88 samples, 0.16%)</title><rect x="46.1074%" y="917" width="0.1599%" height="15" fill="rgb(229,147,28)"/><text x="46.3574%" y="927.50"></text></g><g><title>webserver`csv_core::reader::Dfa::get_output (128 samples, 0.23%)</title><rect x="46.2673%" y="917" width="0.2326%" height="15" fill="rgb(211,29,28)"/><text x="46.5173%" y="927.50"></text></g><g><title>webserver`csv_core::reader::Reader::read_record (1,041 samples, 1.89%)</title><rect x="44.6558%" y="933" width="1.8913%" height="15" fill="rgb(228,72,33)"/><text x="44.9058%" y="943.50">w..</text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_record (2,526 samples, 4.59%)</title><rect x="41.9633%" y="965" width="4.5893%" height="15" fill="rgb(205,214,31)"/><text x="42.2133%" y="975.50">webse..</text></g><g><title>webserver`csv::reader::Reader&lt;R&gt;::read_byte_record (1,300 samples, 2.36%)</title><rect x="44.1907%" y="949" width="2.3619%" height="15" fill="rgb(224,111,15)"/><text x="44.4407%" y="959.50">we..</text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (85 samples, 0.15%)</title><rect x="46.6016%" y="933" width="0.1544%" height="15" fill="rgb(253,21,26)"/><text x="46.8516%" y="943.50"></text></g><g><title>webserver`csv::deserializer::deserialize_string_record::_{{closure}} (78 samples, 0.14%)</title><rect x="46.6143%" y="917" width="0.1417%" height="15" fill="rgb(245,139,43)"/><text x="46.8643%" y="927.50"></text></g><g><title>webserver`csv::string_record::StringRecord::iter (76 samples, 0.14%)</title><rect x="46.6180%" y="901" width="0.1381%" height="15" fill="rgb(252,170,7)"/><text x="46.8680%" y="911.50"></text></g><g><title>webserver`&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (76 samples, 0.14%)</title><rect x="46.6180%" y="885" width="0.1381%" height="15" fill="rgb(231,118,14)"/><text x="46.8680%" y="895.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::iter (74 samples, 0.13%)</title><rect x="46.6216%" y="869" width="0.1344%" height="15" fill="rgb(238,83,0)"/><text x="46.8716%" y="879.50"></text></g><g><title>webserver`&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (74 samples, 0.13%)</title><rect x="46.6216%" y="853" width="0.1344%" height="15" fill="rgb(221,39,39)"/><text x="46.8716%" y="863.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::as_slice (67 samples, 0.12%)</title><rect x="46.6343%" y="837" width="0.1217%" height="15" fill="rgb(222,119,46)"/><text x="46.8843%" y="847.50"></text></g><g><title>webserver`csv::byte_record::Bounds::end (58 samples, 0.11%)</title><rect x="46.8723%" y="853" width="0.1054%" height="15" fill="rgb(222,165,49)"/><text x="47.1223%" y="863.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::as_slice (85 samples, 0.15%)</title><rect x="46.8251%" y="869" width="0.1544%" height="15" fill="rgb(219,113,52)"/><text x="47.0751%" y="879.50"></text></g><g><title>webserver`&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (113 samples, 0.21%)</title><rect x="46.7779%" y="917" width="0.2053%" height="15" fill="rgb(214,7,15)"/><text x="47.0279%" y="927.50"></text></g><g><title>webserver`csv::byte_record::ByteRecord::iter (93 samples, 0.17%)</title><rect x="46.8142%" y="901" width="0.1690%" height="15" fill="rgb(235,32,4)"/><text x="47.0642%" y="911.50"></text></g><g><title>webserver`&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (93 samples, 0.17%)</title><rect x="46.8142%" y="885" width="0.1690%" height="15" fill="rgb(238,90,54)"/><text x="47.0642%" y="895.50"></text></g><g><title>webserver`csv::string_record::StringRecord::iter (119 samples, 0.22%)</title><rect x="46.7688%" y="933" width="0.2162%" height="15" fill="rgb(213,208,19)"/><text x="47.0188%" y="943.50"></text></g><g><title>webserver`&lt;[A] as core::slice::SlicePartialEq&lt;A&gt;&gt;::equal (129 samples, 0.23%)</title><rect x="47.4555%" y="741" width="0.2344%" height="15" fill="rgb(233,156,4)"/><text x="47.7055%" y="751.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Trip::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Trip&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (208 samples, 0.38%)</title><rect x="47.3247%" y="773" width="0.3779%" height="15" fill="rgb(207,194,5)"/><text x="47.5747%" y="783.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (170 samples, 0.31%)</title><rect x="47.3938%" y="757" width="0.3089%" height="15" fill="rgb(206,111,30)"/><text x="47.6438%" y="767.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (237 samples, 0.43%)</title><rect x="47.2920%" y="805" width="0.4306%" height="15" fill="rgb(243,70,54)"/><text x="47.5420%" y="815.50"></text></g><g><title>webserver`serde::de::Visitor::visit_borrowed_bytes (228 samples, 0.41%)</title><rect x="47.3084%" y="789" width="0.4142%" height="15" fill="rgb(242,28,8)"/><text x="47.5584%" y="799.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (265 samples, 0.48%)</title><rect x="47.2448%" y="853" width="0.4815%" height="15" fill="rgb(219,106,18)"/><text x="47.4948%" y="863.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Trip::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Trip&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (254 samples, 0.46%)</title><rect x="47.2648%" y="837" width="0.4615%" height="15" fill="rgb(244,222,10)"/><text x="47.5148%" y="847.50"></text></g><g><title>webserver`&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (246 samples, 0.45%)</title><rect x="47.2793%" y="821" width="0.4469%" height="15" fill="rgb(236,179,52)"/><text x="47.5293%" y="831.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.11%)</title><rect x="48.2604%" y="725" width="0.1054%" height="15" fill="rgb(213,23,39)"/><text x="48.5104%" y="735.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (73 samples, 0.13%)</title><rect x="48.4239%" y="693" width="0.1326%" height="15" fill="rgb(238,48,10)"/><text x="48.6739%" y="703.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (99 samples, 0.18%)</title><rect x="48.3948%" y="709" width="0.1799%" height="15" fill="rgb(251,196,23)"/><text x="48.6448%" y="719.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (114 samples, 0.21%)</title><rect x="48.3694%" y="725" width="0.2071%" height="15" fill="rgb(250,152,24)"/><text x="48.6194%" y="735.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (193 samples, 0.35%)</title><rect x="48.2313%" y="741" width="0.3506%" height="15" fill="rgb(209,150,17)"/><text x="48.4813%" y="751.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (66 samples, 0.12%)</title><rect x="48.6510%" y="709" width="0.1199%" height="15" fill="rgb(234,202,34)"/><text x="48.9010%" y="719.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (78 samples, 0.14%)</title><rect x="48.8618%" y="661" width="0.1417%" height="15" fill="rgb(253,148,53)"/><text x="49.1118%" y="671.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (137 samples, 0.25%)</title><rect x="48.7764%" y="709" width="0.2489%" height="15" fill="rgb(218,129,16)"/><text x="49.0264%" y="719.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (126 samples, 0.23%)</title><rect x="48.7964%" y="693" width="0.2289%" height="15" fill="rgb(216,85,19)"/><text x="49.0464%" y="703.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (113 samples, 0.21%)</title><rect x="48.8200%" y="677" width="0.2053%" height="15" fill="rgb(235,228,7)"/><text x="49.0700%" y="687.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (224 samples, 0.41%)</title><rect x="48.6238%" y="725" width="0.4070%" height="15" fill="rgb(245,175,0)"/><text x="48.8738%" y="735.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (520 samples, 0.94%)</title><rect x="48.0932%" y="757" width="0.9448%" height="15" fill="rgb(208,168,36)"/><text x="48.3432%" y="767.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (250 samples, 0.45%)</title><rect x="48.5838%" y="741" width="0.4542%" height="15" fill="rgb(246,171,24)"/><text x="48.8338%" y="751.50"></text></g><g><title>webserver`core::str::from_utf8 (96 samples, 0.17%)</title><rect x="49.1706%" y="725" width="0.1744%" height="15" fill="rgb(215,142,24)"/><text x="49.4206%" y="735.50"></text></g><g><title>webserver`core::str::run_utf8_validation (80 samples, 0.15%)</title><rect x="49.1997%" y="709" width="0.1453%" height="15" fill="rgb(250,187,7)"/><text x="49.4497%" y="719.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (132 samples, 0.24%)</title><rect x="49.1125%" y="741" width="0.2398%" height="15" fill="rgb(228,66,33)"/><text x="49.3625%" y="751.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (175 samples, 0.32%)</title><rect x="49.0398%" y="757" width="0.3179%" height="15" fill="rgb(234,215,21)"/><text x="49.2898%" y="767.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (722 samples, 1.31%)</title><rect x="48.0515%" y="773" width="1.3117%" height="15" fill="rgb(222,191,20)"/><text x="48.3015%" y="783.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::_{{closure}} (737 samples, 1.34%)</title><rect x="48.0260%" y="789" width="1.3390%" height="15" fill="rgb(245,79,54)"/><text x="48.2760%" y="799.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::and_then (776 samples, 1.41%)</title><rect x="47.9624%" y="805" width="1.4099%" height="15" fill="rgb(240,10,37)"/><text x="48.2124%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (806 samples, 1.46%)</title><rect x="47.9297%" y="821" width="1.4644%" height="15" fill="rgb(214,192,32)"/><text x="48.1797%" y="831.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (922 samples, 1.68%)</title><rect x="47.8389%" y="837" width="1.6751%" height="15" fill="rgb(209,36,54)"/><text x="48.0889%" y="847.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (935 samples, 1.70%)</title><rect x="47.8316%" y="853" width="1.6987%" height="15" fill="rgb(220,10,11)"/><text x="48.0816%" y="863.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (1,381 samples, 2.51%)</title><rect x="47.1467%" y="869" width="2.5090%" height="15" fill="rgb(221,106,17)"/><text x="47.3967%" y="879.50">we..</text></g><g><title>webserver`serde::de::MapAccess::next_key (1,400 samples, 2.54%)</title><rect x="47.1340%" y="885" width="2.5436%" height="15" fill="rgb(251,142,44)"/><text x="47.3840%" y="895.50">we..</text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.11%)</title><rect x="50.0191%" y="709" width="0.1090%" height="15" fill="rgb(238,13,15)"/><text x="50.2691%" y="719.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (73 samples, 0.13%)</title><rect x="50.1463%" y="693" width="0.1326%" height="15" fill="rgb(208,107,27)"/><text x="50.3963%" y="703.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (83 samples, 0.15%)</title><rect x="50.1299%" y="709" width="0.1508%" height="15" fill="rgb(205,136,37)"/><text x="50.3799%" y="719.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (156 samples, 0.28%)</title><rect x="50.0009%" y="725" width="0.2834%" height="15" fill="rgb(250,205,27)"/><text x="50.2509%" y="735.50"></text></g><g><title>webserver`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (66 samples, 0.12%)</title><rect x="50.4224%" y="661" width="0.1199%" height="15" fill="rgb(210,80,43)"/><text x="50.6724%" y="671.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (77 samples, 0.14%)</title><rect x="50.4061%" y="693" width="0.1399%" height="15" fill="rgb(247,160,36)"/><text x="50.6561%" y="703.50"></text></g><g><title>webserver`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (72 samples, 0.13%)</title><rect x="50.4151%" y="677" width="0.1308%" height="15" fill="rgb(234,13,49)"/><text x="50.6651%" y="687.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (127 samples, 0.23%)</title><rect x="50.3189%" y="709" width="0.2307%" height="15" fill="rgb(234,122,0)"/><text x="50.5689%" y="719.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (350 samples, 0.64%)</title><rect x="49.9173%" y="741" width="0.6359%" height="15" fill="rgb(207,146,38)"/><text x="50.1673%" y="751.50"></text></g><g><title>webserver`csv::byte_record::Bounds::ends (147 samples, 0.27%)</title><rect x="50.2862%" y="725" width="0.2671%" height="15" fill="rgb(207,177,25)"/><text x="50.5362%" y="735.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (75 samples, 0.14%)</title><rect x="50.6059%" y="725" width="0.1363%" height="15" fill="rgb(211,178,42)"/><text x="50.8559%" y="735.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (108 samples, 0.20%)</title><rect x="50.5550%" y="741" width="0.1962%" height="15" fill="rgb(230,69,54)"/><text x="50.8050%" y="751.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (478 samples, 0.87%)</title><rect x="49.8864%" y="757" width="0.8684%" height="15" fill="rgb(214,135,41)"/><text x="50.1364%" y="767.50"></text></g><g><title>webserver`core::ptr::swap_nonoverlapping_one (94 samples, 0.17%)</title><rect x="50.8330%" y="693" width="0.1708%" height="15" fill="rgb(237,67,25)"/><text x="51.0830%" y="703.50"></text></g><g><title>webserver`core::mem::replace (122 samples, 0.22%)</title><rect x="50.7840%" y="725" width="0.2217%" height="15" fill="rgb(222,189,50)"/><text x="51.0340%" y="735.50"></text></g><g><title>webserver`core::mem::swap (103 samples, 0.19%)</title><rect x="50.8185%" y="709" width="0.1871%" height="15" fill="rgb(245,148,34)"/><text x="51.0685%" y="719.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (642 samples, 1.17%)</title><rect x="49.8410%" y="773" width="1.1664%" height="15" fill="rgb(222,29,6)"/><text x="50.0910%" y="783.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::take (138 samples, 0.25%)</title><rect x="50.7567%" y="757" width="0.2507%" height="15" fill="rgb(221,189,43)"/><text x="51.0067%" y="767.50"></text></g><g><title>webserver`core::mem::take (127 samples, 0.23%)</title><rect x="50.7767%" y="741" width="0.2307%" height="15" fill="rgb(207,36,27)"/><text x="51.0267%" y="751.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (674 samples, 1.22%)</title><rect x="49.7865%" y="805" width="1.2245%" height="15" fill="rgb(217,90,24)"/><text x="50.0365%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (668 samples, 1.21%)</title><rect x="49.7974%" y="789" width="1.2136%" height="15" fill="rgb(224,66,35)"/><text x="50.0474%" y="799.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (704 samples, 1.28%)</title><rect x="49.7393%" y="821" width="1.2790%" height="15" fill="rgb(221,13,50)"/><text x="49.9893%" y="831.50"></text></g><g><title>webserver`&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (716 samples, 1.30%)</title><rect x="49.7284%" y="837" width="1.3008%" height="15" fill="rgb(236,68,49)"/><text x="49.9784%" y="847.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::get (57 samples, 0.10%)</title><rect x="51.3127%" y="693" width="0.1036%" height="15" fill="rgb(229,146,28)"/><text x="51.5627%" y="703.50"></text></g><g><title>webserver`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (183 samples, 0.33%)</title><rect x="51.1037%" y="725" width="0.3325%" height="15" fill="rgb(225,31,38)"/><text x="51.3537%" y="735.50"></text></g><g><title>webserver`core::str::pattern::TwoWaySearcher::next (172 samples, 0.31%)</title><rect x="51.1237%" y="709" width="0.3125%" height="15" fill="rgb(250,208,3)"/><text x="51.3737%" y="719.50"></text></g><g><title>webserver`&lt;core::str::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.37%)</title><rect x="51.0946%" y="757" width="0.3670%" height="15" fill="rgb(246,54,23)"/><text x="51.3446%" y="767.50"></text></g><g><title>webserver`core::str::SplitInternal&lt;P&gt;::next (202 samples, 0.37%)</title><rect x="51.0946%" y="741" width="0.3670%" height="15" fill="rgb(243,76,11)"/><text x="51.3446%" y="751.50"></text></g><g><title>webserver`&lt;&lt;transit_radar::gtfs::model::id::RouteId as serde::de::Deserialize&gt;::deserialize::StringOrInt as serde::de::Visitor&gt;::visit_str (278 samples, 0.51%)</title><rect x="51.0674%" y="773" width="0.5051%" height="15" fill="rgb(245,21,50)"/><text x="51.3174%" y="783.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.13%)</title><rect x="51.5924%" y="741" width="0.1344%" height="15" fill="rgb(228,9,43)"/><text x="51.8424%" y="751.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.18%)</title><rect x="51.5870%" y="757" width="0.1799%" height="15" fill="rgb(208,100,47)"/><text x="51.8370%" y="767.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (103 samples, 0.19%)</title><rect x="51.5815%" y="773" width="0.1871%" height="15" fill="rgb(232,26,8)"/><text x="51.8315%" y="783.50"></text></g><g><title>webserver`csv::deserializer::try_float (56 samples, 0.10%)</title><rect x="51.8305%" y="773" width="0.1017%" height="15" fill="rgb(216,166,38)"/><text x="52.0805%" y="783.50"></text></g><g><title>webserver`__muloti4 (476 samples, 0.86%)</title><rect x="51.9703%" y="709" width="0.8648%" height="15" fill="rgb(251,202,51)"/><text x="52.2203%" y="719.50"></text></g><g><title>webserver`__udivmodti4 (464 samples, 0.84%)</title><rect x="51.9922%" y="693" width="0.8430%" height="15" fill="rgb(254,216,34)"/><text x="52.2422%" y="703.50"></text></g><g><title>webserver`csv::deserializer::try_negative_integer128 (499 samples, 0.91%)</title><rect x="51.9322%" y="773" width="0.9066%" height="15" fill="rgb(251,32,27)"/><text x="52.1822%" y="783.50"></text></g><g><title>webserver`core::str::_&lt;impl str&gt;::parse (496 samples, 0.90%)</title><rect x="51.9376%" y="757" width="0.9011%" height="15" fill="rgb(208,127,28)"/><text x="52.1876%" y="767.50"></text></g><g><title>webserver`core::num::_&lt;impl core::str::FromStr for i128&gt;::from_str (496 samples, 0.90%)</title><rect x="51.9376%" y="741" width="0.9011%" height="15" fill="rgb(224,137,22)"/><text x="52.1876%" y="751.50"></text></g><g><title>webserver`core::num::from_str_radix (490 samples, 0.89%)</title><rect x="51.9485%" y="725" width="0.8902%" height="15" fill="rgb(254,70,32)"/><text x="52.1985%" y="735.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::infer_deserialize (1,018 samples, 1.85%)</title><rect x="51.0310%" y="789" width="1.8495%" height="15" fill="rgb(229,75,37)"/><text x="51.2810%" y="799.50">w..</text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::RouteId as serde::de::Deserialize&gt;::deserialize (1,024 samples, 1.86%)</title><rect x="51.0292%" y="837" width="1.8604%" height="15" fill="rgb(252,64,23)"/><text x="51.2792%" y="847.50">w..</text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_any (1,023 samples, 1.86%)</title><rect x="51.0310%" y="821" width="1.8586%" height="15" fill="rgb(232,162,48)"/><text x="51.2810%" y="831.50">w..</text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::infer_deserialize (1,023 samples, 1.86%)</title><rect x="51.0310%" y="805" width="1.8586%" height="15" fill="rgb(246,160,12)"/><text x="51.2810%" y="815.50">w..</text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.11%)</title><rect x="52.9496%" y="757" width="0.1126%" height="15" fill="rgb(247,166,0)"/><text x="53.1996%" y="767.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.18%)</title><rect x="52.9315%" y="773" width="0.1817%" height="15" fill="rgb(249,219,21)"/><text x="53.1815%" y="783.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (106 samples, 0.19%)</title><rect x="52.9224%" y="805" width="0.1926%" height="15" fill="rgb(205,209,3)"/><text x="53.1724%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (106 samples, 0.19%)</title><rect x="52.9224%" y="789" width="0.1926%" height="15" fill="rgb(243,44,1)"/><text x="53.1724%" y="799.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u16 (191 samples, 0.35%)</title><rect x="52.8897%" y="821" width="0.3470%" height="15" fill="rgb(206,159,16)"/><text x="53.1397%" y="831.50"></text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for u16&gt;::deserialize (201 samples, 0.37%)</title><rect x="52.8897%" y="837" width="0.3652%" height="15" fill="rgb(244,77,30)"/><text x="53.1397%" y="847.50"></text></g><g><title>webserver`&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.12%)</title><rect x="53.2930%" y="741" width="0.1181%" height="15" fill="rgb(218,69,12)"/><text x="53.5430%" y="751.50"></text></g><g><title>webserver`&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.15%)</title><rect x="53.2912%" y="757" width="0.1544%" height="15" fill="rgb(212,87,7)"/><text x="53.5412%" y="767.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.19%)</title><rect x="53.2875%" y="773" width="0.1871%" height="15" fill="rgb(245,114,25)"/><text x="53.5375%" y="783.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (108 samples, 0.20%)</title><rect x="53.2821%" y="805" width="0.1962%" height="15" fill="rgb(210,61,42)"/><text x="53.5321%" y="815.50"></text></g><g><title>webserver`&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (108 samples, 0.20%)</title><rect x="53.2821%" y="789" width="0.1962%" height="15" fill="rgb(211,52,33)"/><text x="53.5321%" y="799.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_u64 (169 samples, 0.31%)</title><rect x="53.2567%" y="821" width="0.3070%" height="15" fill="rgb(234,58,33)"/><text x="53.5067%" y="831.50"></text></g><g><title>webserver`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,131 samples, 3.87%)</title><rect x="49.7084%" y="853" width="3.8717%" height="15" fill="rgb(220,115,36)"/><text x="49.9584%" y="863.50">webs..</text></g><g><title>webserver`serde::de::impls::_&lt;impl serde::de::Deserialize for u64&gt;::deserialize (179 samples, 0.33%)</title><rect x="53.2548%" y="837" width="0.3252%" height="15" fill="rgb(243,153,54)"/><text x="53.5048%" y="847.50"></text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (2,144 samples, 3.90%)</title><rect x="49.6902%" y="869" width="3.8953%" height="15" fill="rgb(251,47,18)"/><text x="49.9402%" y="879.50">webs..</text></g><g><title>webserver`&lt;transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Trip::&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Trip&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3,625 samples, 6.59%)</title><rect x="47.0031%" y="901" width="6.5860%" height="15" fill="rgb(242,102,42)"/><text x="47.2531%" y="911.50">webserver..</text></g><g><title>webserver`serde::de::MapAccess::next_value (2,153 samples, 3.91%)</title><rect x="49.6775%" y="885" width="3.9116%" height="15" fill="rgb(234,31,38)"/><text x="49.9275%" y="895.50">webs..</text></g><g><title>webserver`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,647 samples, 6.63%)</title><rect x="46.9886%" y="917" width="6.6260%" height="15" fill="rgb(221,117,51)"/><text x="47.2386%" y="927.50">webserver..</text></g><g><title>webserver`csv::deserializer::deserialize_string_record (3,885 samples, 7.06%)</title><rect x="46.5617%" y="949" width="7.0584%" height="15" fill="rgb(212,20,18)"/><text x="46.8117%" y="959.50">webserver..</text></g><g><title>webserver`transit_radar::gtfs::model::_IMPL_DESERIALIZE_FOR_Trip::_&lt;impl serde::de::Deserialize for transit_radar::gtfs::model::Trip&gt;::deserialize (3,652 samples, 6.64%)</title><rect x="46.9850%" y="933" width="6.6351%" height="15" fill="rgb(245,133,36)"/><text x="47.2350%" y="943.50">webserver..</text></g><g><title>webserver`&lt;csv::reader::DeserializeRecordsIntoIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,434 samples, 11.69%)</title><rect x="41.9360%" y="981" width="11.6895%" height="15" fill="rgb(212,6,19)"/><text x="42.1860%" y="991.50">webserver`&lt;csv::r..</text></g><g><title>webserver`csv::string_record::StringRecord::deserialize (3,893 samples, 7.07%)</title><rect x="46.5526%" y="965" width="7.0729%" height="15" fill="rgb(218,1,36)"/><text x="46.8026%" y="975.50">webserver..</text></g><g><title>webserver`&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,506 samples, 11.82%)</title><rect x="41.8724%" y="1029" width="11.8203%" height="15" fill="rgb(246,84,54)"/><text x="42.1224%" y="1039.50">webserver`&lt;core::i..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::find (6,504 samples, 11.82%)</title><rect x="41.8761%" y="1013" width="11.8166%" height="15" fill="rgb(242,110,6)"/><text x="42.1261%" y="1023.50">webserver`core::it..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (6,493 samples, 11.80%)</title><rect x="41.8960%" y="997" width="11.7967%" height="15" fill="rgb(214,47,5)"/><text x="42.1460%" y="1007.50">webserver`core::i..</text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (86 samples, 0.16%)</title><rect x="53.7200%" y="981" width="0.1562%" height="15" fill="rgb(218,159,25)"/><text x="53.9700%" y="991.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (80 samples, 0.15%)</title><rect x="53.7309%" y="965" width="0.1453%" height="15" fill="rgb(215,211,28)"/><text x="53.9809%" y="975.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (78 samples, 0.14%)</title><rect x="53.7345%" y="949" width="0.1417%" height="15" fill="rgb(238,59,32)"/><text x="53.9845%" y="959.50"></text></g><g><title>webserver`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (58 samples, 0.11%)</title><rect x="53.9125%" y="981" width="0.1054%" height="15" fill="rgb(226,82,3)"/><text x="54.1625%" y="991.50"></text></g><g><title>webserver`hashbrown::map::make_hash (167 samples, 0.30%)</title><rect x="53.7163%" y="997" width="0.3034%" height="15" fill="rgb(240,164,32)"/><text x="53.9663%" y="1007.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (186 samples, 0.34%)</title><rect x="54.0252%" y="997" width="0.3379%" height="15" fill="rgb(232,46,7)"/><text x="54.2752%" y="1007.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (63 samples, 0.11%)</title><rect x="54.4176%" y="981" width="0.1145%" height="15" fill="rgb(229,129,53)"/><text x="54.6676%" y="991.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (79 samples, 0.14%)</title><rect x="54.5793%" y="901" width="0.1435%" height="15" fill="rgb(234,188,29)"/><text x="54.8293%" y="911.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (79 samples, 0.14%)</title><rect x="54.5793%" y="885" width="0.1435%" height="15" fill="rgb(246,141,4)"/><text x="54.8293%" y="895.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (78 samples, 0.14%)</title><rect x="54.5811%" y="869" width="0.1417%" height="15" fill="rgb(229,23,39)"/><text x="54.8311%" y="879.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (137 samples, 0.25%)</title><rect x="54.5793%" y="933" width="0.2489%" height="15" fill="rgb(206,12,3)"/><text x="54.8293%" y="943.50"></text></g><g><title>webserver`hashbrown::map::make_hash (137 samples, 0.25%)</title><rect x="54.5793%" y="917" width="0.2489%" height="15" fill="rgb(252,226,20)"/><text x="54.8293%" y="927.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve (269 samples, 0.49%)</title><rect x="54.5321%" y="981" width="0.4887%" height="15" fill="rgb(216,123,35)"/><text x="54.7821%" y="991.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (269 samples, 0.49%)</title><rect x="54.5321%" y="965" width="0.4887%" height="15" fill="rgb(212,68,40)"/><text x="54.7821%" y="975.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::resize (268 samples, 0.49%)</title><rect x="54.5339%" y="949" width="0.4869%" height="15" fill="rgb(254,125,32)"/><text x="54.7839%" y="959.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::insert (382 samples, 0.69%)</title><rect x="54.3686%" y="997" width="0.6940%" height="15" fill="rgb(253,97,22)"/><text x="54.6186%" y="1007.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (761 samples, 1.38%)</title><rect x="53.6927%" y="1029" width="1.3826%" height="15" fill="rgb(241,101,14)"/><text x="53.9427%" y="1039.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (760 samples, 1.38%)</title><rect x="53.6945%" y="1013" width="1.3808%" height="15" fill="rgb(238,103,29)"/><text x="53.9445%" y="1023.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::load_trips_by_id (7,273 samples, 13.21%)</title><rect x="41.8633%" y="1045" width="13.2138%" height="15" fill="rgb(233,195,47)"/><text x="42.1133%" y="1055.50">webserver`transit_ra..</text></g><g><title>webserver`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (30,304 samples, 55.06%)</title><rect x="0.0218%" y="1093" width="55.0571%" height="15" fill="rgb(246,218,30)"/><text x="0.2718%" y="1103.50">webserver`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>webserver`webserver::main::_{{closure}} (30,304 samples, 55.06%)</title><rect x="0.0218%" y="1077" width="55.0571%" height="15" fill="rgb(219,145,47)"/><text x="0.2718%" y="1087.50">webserver`webserver::main::_{{closure}}</text></g><g><title>webserver`webserver::load_data (30,280 samples, 55.01%)</title><rect x="0.0654%" y="1061" width="55.0135%" height="15" fill="rgb(243,12,26)"/><text x="0.3154%" y="1071.50">webserver`webserver::load_data</text></g><g><title>webserver`serde::ser::impls::_&lt;impl serde::ser::Serialize for str&gt;::serialize (65 samples, 0.12%)</title><rect x="55.3442%" y="85" width="0.1181%" height="15" fill="rgb(214,87,16)"/><text x="55.5942%" y="95.50"></text></g><g><title>webserver`&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (64 samples, 0.12%)</title><rect x="55.3460%" y="69" width="0.1163%" height="15" fill="rgb(208,99,42)"/><text x="55.5960%" y="79.50"></text></g><g><title>webserver`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (63 samples, 0.11%)</title><rect x="55.3478%" y="53" width="0.1145%" height="15" fill="rgb(253,99,2)"/><text x="55.5978%" y="63.50"></text></g><g><title>webserver`serde_json::ser::format_escaped_str (62 samples, 0.11%)</title><rect x="55.3496%" y="37" width="0.1126%" height="15" fill="rgb(220,168,23)"/><text x="55.5996%" y="47.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (70 samples, 0.13%)</title><rect x="55.3424%" y="101" width="0.1272%" height="15" fill="rgb(242,38,24)"/><text x="55.5924%" y="111.50"></text></g><g><title>webserver`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (113 samples, 0.21%)</title><rect x="55.3333%" y="165" width="0.2053%" height="15" fill="rgb(225,182,9)"/><text x="55.5833%" y="175.50"></text></g><g><title>webserver`webserver::_IMPL_SERIALIZE_FOR_FESegment::_&lt;impl serde::ser::Serialize for webserver::FESegment&gt;::serialize (112 samples, 0.20%)</title><rect x="55.3351%" y="149" width="0.2035%" height="15" fill="rgb(243,178,37)"/><text x="55.5851%" y="159.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (108 samples, 0.20%)</title><rect x="55.3424%" y="133" width="0.1962%" height="15" fill="rgb(232,139,19)"/><text x="55.5924%" y="143.50"></text></g><g><title>webserver`serde::ser::SerializeMap::serialize_entry (108 samples, 0.20%)</title><rect x="55.3424%" y="117" width="0.1962%" height="15" fill="rgb(225,201,24)"/><text x="55.5924%" y="127.50"></text></g><g><title>webserver`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (120 samples, 0.22%)</title><rect x="55.3278%" y="213" width="0.2180%" height="15" fill="rgb(221,47,46)"/><text x="55.5778%" y="223.50"></text></g><g><title>webserver`serde::ser::Serializer::collect_seq (120 samples, 0.22%)</title><rect x="55.3278%" y="197" width="0.2180%" height="15" fill="rgb(249,23,13)"/><text x="55.5778%" y="207.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (117 samples, 0.21%)</title><rect x="55.3333%" y="181" width="0.2126%" height="15" fill="rgb(219,9,5)"/><text x="55.5833%" y="191.50"></text></g><g><title>webserver`webserver::_IMPL_SERIALIZE_FOR_FERoute::_&lt;impl serde::ser::Serialize for webserver::FERoute&gt;::serialize (142 samples, 0.26%)</title><rect x="55.3079%" y="277" width="0.2580%" height="15" fill="rgb(254,171,16)"/><text x="55.5579%" y="287.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (141 samples, 0.26%)</title><rect x="55.3097%" y="261" width="0.2562%" height="15" fill="rgb(230,171,20)"/><text x="55.5597%" y="271.50"></text></g><g><title>webserver`serde::ser::SerializeMap::serialize_entry (141 samples, 0.26%)</title><rect x="55.3097%" y="245" width="0.2562%" height="15" fill="rgb(210,71,41)"/><text x="55.5597%" y="255.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (134 samples, 0.24%)</title><rect x="55.3224%" y="229" width="0.2435%" height="15" fill="rgb(206,173,20)"/><text x="55.5724%" y="239.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (63 samples, 0.11%)</title><rect x="55.5713%" y="229" width="0.1145%" height="15" fill="rgb(233,88,34)"/><text x="55.8213%" y="239.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (311 samples, 0.57%)</title><rect x="55.2116%" y="309" width="0.5650%" height="15" fill="rgb(223,209,46)"/><text x="55.4616%" y="319.50"></text></g><g><title>webserver`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (311 samples, 0.57%)</title><rect x="55.2116%" y="293" width="0.5650%" height="15" fill="rgb(250,43,18)"/><text x="55.4616%" y="303.50"></text></g><g><title>webserver`webserver::_IMPL_SERIALIZE_FOR_FEStop::_&lt;impl serde::ser::Serialize for webserver::FEStop&gt;::serialize (116 samples, 0.21%)</title><rect x="55.5659%" y="277" width="0.2108%" height="15" fill="rgb(208,13,10)"/><text x="55.8159%" y="287.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (113 samples, 0.21%)</title><rect x="55.5713%" y="261" width="0.2053%" height="15" fill="rgb(212,200,36)"/><text x="55.8213%" y="271.50"></text></g><g><title>webserver`serde::ser::SerializeMap::serialize_entry (113 samples, 0.21%)</title><rect x="55.5713%" y="245" width="0.2053%" height="15" fill="rgb(225,90,30)"/><text x="55.8213%" y="255.50"></text></g><g><title>webserver`warp::reply::json (318 samples, 0.58%)</title><rect x="55.2007%" y="453" width="0.5778%" height="15" fill="rgb(236,182,39)"/><text x="55.4507%" y="463.50"></text></g><g><title>webserver`serde_json::ser::to_vec (318 samples, 0.58%)</title><rect x="55.2007%" y="437" width="0.5778%" height="15" fill="rgb(212,144,35)"/><text x="55.4507%" y="447.50"></text></g><g><title>webserver`serde_json::ser::to_writer (318 samples, 0.58%)</title><rect x="55.2007%" y="421" width="0.5778%" height="15" fill="rgb(228,63,44)"/><text x="55.4507%" y="431.50"></text></g><g><title>webserver`webserver::_IMPL_SERIALIZE_FOR_FEData::_&lt;impl serde::ser::Serialize for webserver::FEData&gt;::serialize (318 samples, 0.58%)</title><rect x="55.2007%" y="405" width="0.5778%" height="15" fill="rgb(228,109,6)"/><text x="55.4507%" y="415.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (318 samples, 0.58%)</title><rect x="55.2007%" y="389" width="0.5778%" height="15" fill="rgb(238,117,24)"/><text x="55.4507%" y="399.50"></text></g><g><title>webserver`serde::ser::SerializeMap::serialize_entry (318 samples, 0.58%)</title><rect x="55.2007%" y="373" width="0.5778%" height="15" fill="rgb(242,26,26)"/><text x="55.4507%" y="383.50"></text></g><g><title>webserver`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (314 samples, 0.57%)</title><rect x="55.2079%" y="357" width="0.5705%" height="15" fill="rgb(221,92,48)"/><text x="55.4579%" y="367.50"></text></g><g><title>webserver`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (314 samples, 0.57%)</title><rect x="55.2079%" y="341" width="0.5705%" height="15" fill="rgb(209,209,32)"/><text x="55.4579%" y="351.50"></text></g><g><title>webserver`serde::ser::Serializer::collect_seq (314 samples, 0.57%)</title><rect x="55.2079%" y="325" width="0.5705%" height="15" fill="rgb(221,70,22)"/><text x="55.4579%" y="335.50"></text></g><g><title>webserver`&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq (92 samples, 0.17%)</title><rect x="55.8602%" y="421" width="0.1671%" height="15" fill="rgb(248,145,5)"/><text x="56.1102%" y="431.50"></text></g><g><title>webserver`&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 0.20%)</title><rect x="56.1273%" y="357" width="0.2035%" height="15" fill="rgb(226,116,26)"/><text x="56.3773%" y="367.50"></text></g><g><title>webserver`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.24%)</title><rect x="56.0964%" y="373" width="0.2435%" height="15" fill="rgb(244,5,17)"/><text x="56.3464%" y="383.50"></text></g><g><title>webserver`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (225 samples, 0.41%)</title><rect x="56.0764%" y="389" width="0.4088%" height="15" fill="rgb(252,159,33)"/><text x="56.3264%" y="399.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (77 samples, 0.14%)</title><rect x="56.3453%" y="373" width="0.1399%" height="15" fill="rgb(206,71,0)"/><text x="56.5953%" y="383.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (238 samples, 0.43%)</title><rect x="56.0564%" y="405" width="0.4324%" height="15" fill="rgb(233,118,54)"/><text x="56.3064%" y="415.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (318 samples, 0.58%)</title><rect x="56.0382%" y="421" width="0.5778%" height="15" fill="rgb(234,83,48)"/><text x="56.2882%" y="431.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (70 samples, 0.13%)</title><rect x="56.4888%" y="405" width="0.1272%" height="15" fill="rgb(228,3,54)"/><text x="56.7388%" y="415.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::is_none (105 samples, 0.19%)</title><rect x="56.6160%" y="421" width="0.1908%" height="15" fill="rgb(226,155,13)"/><text x="56.8660%" y="431.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::is_some (87 samples, 0.16%)</title><rect x="56.6487%" y="405" width="0.1581%" height="15" fill="rgb(241,28,37)"/><text x="56.8987%" y="415.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_station_by_name (562 samples, 1.02%)</title><rect x="55.7911%" y="437" width="1.0211%" height="15" fill="rgb(233,93,10)"/><text x="56.0411%" y="447.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (67 samples, 0.12%)</title><rect x="57.1120%" y="325" width="0.1217%" height="15" fill="rgb(225,113,19)"/><text x="57.3620%" y="335.50"></text></g><g><title>webserver`alloc::collections::binary_heap::Hole&lt;T&gt;::get (69 samples, 0.13%)</title><rect x="57.2337%" y="325" width="0.1254%" height="15" fill="rgb(241,2,18)"/><text x="57.4837%" y="335.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::get_unchecked (61 samples, 0.11%)</title><rect x="57.2482%" y="309" width="0.1108%" height="15" fill="rgb(228,207,21)"/><text x="57.4982%" y="319.50"></text></g><g><title>webserver`alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (90 samples, 0.16%)</title><rect x="57.3591%" y="325" width="0.1635%" height="15" fill="rgb(213,211,35)"/><text x="57.6091%" y="335.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Time as core::cmp::Ord&gt;::cmp (80 samples, 0.15%)</title><rect x="57.6734%" y="261" width="0.1453%" height="15" fill="rgb(209,83,10)"/><text x="57.9234%" y="271.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::Ord for u32&gt;::cmp (65 samples, 0.12%)</title><rect x="57.7006%" y="245" width="0.1181%" height="15" fill="rgb(209,164,1)"/><text x="57.9506%" y="255.50"></text></g><g><title>webserver`&lt;transit_radar::journey_graph::QueueItem as core::cmp::Ord&gt;::cmp (214 samples, 0.39%)</title><rect x="57.6298%" y="277" width="0.3888%" height="15" fill="rgb(213,184,43)"/><text x="57.8798%" y="287.50"></text></g><g><title>webserver`core::cmp::Ordering::then_with (102 samples, 0.19%)</title><rect x="57.8333%" y="261" width="0.1853%" height="15" fill="rgb(231,61,34)"/><text x="58.0833%" y="271.50"></text></g><g><title>webserver`&lt;transit_radar::journey_graph::QueueItem as core::cmp::Ord&gt;::cmp::_{{closure}} (93 samples, 0.17%)</title><rect x="57.8496%" y="245" width="0.1690%" height="15" fill="rgb(235,75,3)"/><text x="58.0996%" y="255.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (248 samples, 0.45%)</title><rect x="57.5716%" y="325" width="0.4506%" height="15" fill="rgb(220,106,47)"/><text x="57.8216%" y="335.50"></text></g><g><title>webserver`core::cmp::PartialOrd::gt (244 samples, 0.44%)</title><rect x="57.5789%" y="309" width="0.4433%" height="15" fill="rgb(210,196,33)"/><text x="57.8289%" y="319.50"></text></g><g><title>webserver`&lt;transit_radar::journey_graph::QueueItem as core::cmp::PartialOrd&gt;::partial_cmp (227 samples, 0.41%)</title><rect x="57.6098%" y="293" width="0.4124%" height="15" fill="rgb(229,154,42)"/><text x="57.8598%" y="303.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (556 samples, 1.01%)</title><rect x="57.0320%" y="341" width="1.0102%" height="15" fill="rgb(228,114,26)"/><text x="57.2820%" y="351.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::_{{closure}} (608 samples, 1.10%)</title><rect x="57.0066%" y="357" width="1.1046%" height="15" fill="rgb(208,144,1)"/><text x="57.2566%" y="367.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (616 samples, 1.12%)</title><rect x="56.9957%" y="373" width="1.1192%" height="15" fill="rgb(239,112,37)"/><text x="57.2457%" y="383.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (658 samples, 1.20%)</title><rect x="56.9230%" y="389" width="1.1955%" height="15" fill="rgb(210,96,50)"/><text x="57.1730%" y="399.50"></text></g><g><title>webserver`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 0.19%)</title><rect x="58.2402%" y="309" width="0.1944%" height="15" fill="rgb(222,178,2)"/><text x="58.4902%" y="319.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (103 samples, 0.19%)</title><rect x="58.2475%" y="293" width="0.1871%" height="15" fill="rgb(226,74,18)"/><text x="58.4975%" y="303.50"></text></g><g><title>webserver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (98 samples, 0.18%)</title><rect x="58.2566%" y="277" width="0.1780%" height="15" fill="rgb(225,67,54)"/><text x="58.5066%" y="287.50"></text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::next_block::_{{closure}} (96 samples, 0.17%)</title><rect x="58.2602%" y="261" width="0.1744%" height="15" fill="rgb(251,92,32)"/><text x="58.5102%" y="271.50"></text></g><g><title>webserver`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.25%)</title><rect x="58.2184%" y="325" width="0.2489%" height="15" fill="rgb(228,149,22)"/><text x="58.4684%" y="335.50"></text></g><g><title>webserver`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.27%)</title><rect x="58.2093%" y="341" width="0.2653%" height="15" fill="rgb(243,54,13)"/><text x="58.4593%" y="351.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (221 samples, 0.40%)</title><rect x="58.1494%" y="357" width="0.4015%" height="15" fill="rgb(243,180,28)"/><text x="58.3994%" y="367.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::collect (234 samples, 0.43%)</title><rect x="58.1330%" y="389" width="0.4251%" height="15" fill="rgb(208,167,24)"/><text x="58.3830%" y="399.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (230 samples, 0.42%)</title><rect x="58.1403%" y="373" width="0.4179%" height="15" fill="rgb(245,73,45)"/><text x="58.3903%" y="383.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (59 samples, 0.11%)</title><rect x="58.8107%" y="373" width="0.1072%" height="15" fill="rgb(237,203,48)"/><text x="59.0607%" y="383.50"></text></g><g><title>webserver`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (59 samples, 0.11%)</title><rect x="58.8107%" y="357" width="0.1072%" height="15" fill="rgb(211,197,16)"/><text x="59.0607%" y="367.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (62 samples, 0.11%)</title><rect x="59.0687%" y="197" width="0.1126%" height="15" fill="rgb(243,99,51)"/><text x="59.3187%" y="207.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::extend_desugared::_{{closure}} (74 samples, 0.13%)</title><rect x="59.0632%" y="229" width="0.1344%" height="15" fill="rgb(215,123,29)"/><text x="59.3132%" y="239.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (73 samples, 0.13%)</title><rect x="59.0651%" y="213" width="0.1326%" height="15" fill="rgb(239,186,37)"/><text x="59.3151%" y="223.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (82 samples, 0.15%)</title><rect x="59.0505%" y="261" width="0.1490%" height="15" fill="rgb(252,136,39)"/><text x="59.3005%" y="271.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (79 samples, 0.14%)</title><rect x="59.0560%" y="245" width="0.1435%" height="15" fill="rgb(223,213,32)"/><text x="59.3060%" y="255.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (92 samples, 0.17%)</title><rect x="59.0342%" y="277" width="0.1671%" height="15" fill="rgb(233,115,5)"/><text x="59.2842%" y="287.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::fold (103 samples, 0.19%)</title><rect x="59.0305%" y="293" width="0.1871%" height="15" fill="rgb(207,226,44)"/><text x="59.2805%" y="303.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::extend_desugared (112 samples, 0.20%)</title><rect x="59.0160%" y="325" width="0.2035%" height="15" fill="rgb(208,126,0)"/><text x="59.2660%" y="335.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::for_each (106 samples, 0.19%)</title><rect x="59.0269%" y="309" width="0.1926%" height="15" fill="rgb(244,66,21)"/><text x="59.2769%" y="319.50"></text></g><g><title>webserver`&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (115 samples, 0.21%)</title><rect x="59.0124%" y="357" width="0.2089%" height="15" fill="rgb(222,97,12)"/><text x="59.2624%" y="367.50"></text></g><g><title>webserver`&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as alloc::collections::SpecExtend&lt;I&gt;&gt;::spec_extend (115 samples, 0.21%)</title><rect x="59.0124%" y="341" width="0.2089%" height="15" fill="rgb(219,213,19)"/><text x="59.2624%" y="351.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::offset (60 samples, 0.11%)</title><rect x="60.2369%" y="293" width="0.1090%" height="15" fill="rgb(252,169,30)"/><text x="60.4869%" y="303.50"></text></g><g><title>webserver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (90 samples, 0.16%)</title><rect x="60.3459%" y="293" width="0.1635%" height="15" fill="rgb(206,32,51)"/><text x="60.5959%" y="303.50"></text></g><g><title>webserver`&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (448 samples, 0.81%)</title><rect x="59.7682%" y="309" width="0.8139%" height="15" fill="rgb(250,172,42)"/><text x="60.0182%" y="319.50"></text></g><g><title>webserver`hashbrown::map::make_hash (58 samples, 0.11%)</title><rect x="63.5272%" y="213" width="0.1054%" height="15" fill="rgb(209,34,43)"/><text x="63.7772%" y="223.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (138 samples, 0.25%)</title><rect x="63.5108%" y="229" width="0.2507%" height="15" fill="rgb(223,11,35)"/><text x="63.7608%" y="239.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (71 samples, 0.13%)</title><rect x="63.6326%" y="213" width="0.1290%" height="15" fill="rgb(251,219,26)"/><text x="63.8826%" y="223.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (151 samples, 0.27%)</title><rect x="63.4890%" y="261" width="0.2743%" height="15" fill="rgb(231,119,3)"/><text x="63.7390%" y="271.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (143 samples, 0.26%)</title><rect x="63.5036%" y="245" width="0.2598%" height="15" fill="rgb(216,97,11)"/><text x="63.7536%" y="255.50"></text></g><g><title>webserver`hashbrown::map::make_hash (68 samples, 0.12%)</title><rect x="63.7852%" y="181" width="0.1235%" height="15" fill="rgb(223,59,9)"/><text x="64.0352%" y="191.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (76 samples, 0.14%)</title><rect x="63.9087%" y="181" width="0.1381%" height="15" fill="rgb(233,93,31)"/><text x="64.1587%" y="191.50"></text></g><g><title>webserver`std::collections::hash::set::HashSet&lt;T,S&gt;::contains (157 samples, 0.29%)</title><rect x="63.7634%" y="261" width="0.2852%" height="15" fill="rgb(239,81,33)"/><text x="64.0134%" y="271.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (157 samples, 0.29%)</title><rect x="63.7634%" y="245" width="0.2852%" height="15" fill="rgb(213,120,34)"/><text x="64.0134%" y="255.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (156 samples, 0.28%)</title><rect x="63.7652%" y="229" width="0.2834%" height="15" fill="rgb(243,49,53)"/><text x="64.0152%" y="239.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (155 samples, 0.28%)</title><rect x="63.7670%" y="213" width="0.2816%" height="15" fill="rgb(247,216,33)"/><text x="64.0170%" y="223.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (152 samples, 0.28%)</title><rect x="63.7725%" y="197" width="0.2762%" height="15" fill="rgb(226,26,14)"/><text x="64.0225%" y="207.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::expect (69 samples, 0.13%)</title><rect x="64.4193%" y="245" width="0.1254%" height="15" fill="rgb(215,49,53)"/><text x="64.6693%" y="255.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (119 samples, 0.22%)</title><rect x="65.8073%" y="165" width="0.2162%" height="15" fill="rgb(245,162,40)"/><text x="66.0573%" y="175.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (88 samples, 0.16%)</title><rect x="66.0235%" y="165" width="0.1599%" height="15" fill="rgb(229,68,17)"/><text x="66.2735%" y="175.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::as_ptr (278 samples, 0.51%)</title><rect x="65.6856%" y="181" width="0.5051%" height="15" fill="rgb(213,182,10)"/><text x="65.9356%" y="191.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (723 samples, 1.31%)</title><rect x="65.1024%" y="197" width="1.3136%" height="15" fill="rgb(245,125,30)"/><text x="65.3524%" y="207.50"></text></g><g><title>webserver`core::slice::from_raw_parts (108 samples, 0.20%)</title><rect x="66.2197%" y="181" width="0.1962%" height="15" fill="rgb(232,202,2)"/><text x="66.4697%" y="191.50"></text></g><g><title>webserver`core::ptr::slice_from_raw_parts (69 samples, 0.13%)</title><rect x="66.2906%" y="165" width="0.1254%" height="15" fill="rgb(237,140,51)"/><text x="66.5406%" y="175.50"></text></g><g><title>webserver`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (100 samples, 0.18%)</title><rect x="66.4505%" y="197" width="0.1817%" height="15" fill="rgb(236,157,25)"/><text x="66.7005%" y="207.50"></text></g><g><title>webserver`&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (60 samples, 0.11%)</title><rect x="66.5231%" y="181" width="0.1090%" height="15" fill="rgb(219,209,0)"/><text x="66.7731%" y="191.50"></text></g><g><title>webserver`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (930 samples, 1.69%)</title><rect x="64.9607%" y="213" width="1.6896%" height="15" fill="rgb(240,116,54)"/><text x="65.2107%" y="223.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (1,163 samples, 2.11%)</title><rect x="64.5446%" y="245" width="2.1130%" height="15" fill="rgb(216,10,36)"/><text x="64.7946%" y="255.50">w..</text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::stop::_{{closure}} (1,005 samples, 1.83%)</title><rect x="64.8317%" y="229" width="1.8259%" height="15" fill="rgb(222,72,44)"/><text x="65.0817%" y="239.50">w..</text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (142 samples, 0.26%)</title><rect x="66.8611%" y="213" width="0.2580%" height="15" fill="rgb(232,159,9)"/><text x="67.1111%" y="223.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (112 samples, 0.20%)</title><rect x="67.5496%" y="181" width="0.2035%" height="15" fill="rgb(210,39,32)"/><text x="67.7996%" y="191.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::map (226 samples, 0.41%)</title><rect x="67.3680%" y="197" width="0.4106%" height="15" fill="rgb(216,194,45)"/><text x="67.6180%" y="207.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::rotate_left (250 samples, 0.45%)</title><rect x="69.2938%" y="117" width="0.4542%" height="15" fill="rgb(218,18,35)"/><text x="69.5438%" y="127.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (891 samples, 1.62%)</title><rect x="68.4671%" y="133" width="1.6188%" height="15" fill="rgb(207,83,51)"/><text x="68.7171%" y="143.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::wrapping_add (186 samples, 0.34%)</title><rect x="69.7480%" y="117" width="0.3379%" height="15" fill="rgb(225,63,43)"/><text x="69.9980%" y="127.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::rotate_left (681 samples, 1.24%)</title><rect x="72.5768%" y="117" width="1.2373%" height="15" fill="rgb(207,57,36)"/><text x="72.8268%" y="127.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,672 samples, 4.85%)</title><rect x="70.0859%" y="133" width="4.8546%" height="15" fill="rgb(216,99,33)"/><text x="70.3359%" y="143.50">webser..</text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::wrapping_add (620 samples, 1.13%)</title><rect x="73.8141%" y="117" width="1.1264%" height="15" fill="rgb(225,42,16)"/><text x="74.0641%" y="127.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::rotate_left (281 samples, 0.51%)</title><rect x="74.9405%" y="133" width="0.5105%" height="15" fill="rgb(220,201,45)"/><text x="75.1905%" y="143.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,082 samples, 7.42%)</title><rect x="68.1292%" y="149" width="7.4163%" height="15" fill="rgb(225,33,4)"/><text x="68.3792%" y="159.50">webserver`..</text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4,183 samples, 7.60%)</title><rect x="67.9748%" y="181" width="7.5998%" height="15" fill="rgb(224,33,50)"/><text x="68.2248%" y="191.50">webserver`..</text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,142 samples, 7.53%)</title><rect x="68.0493%" y="165" width="7.5253%" height="15" fill="rgb(246,198,51)"/><text x="68.2993%" y="175.50">webserver`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (91 samples, 0.17%)</title><rect x="75.7217%" y="165" width="0.1653%" height="15" fill="rgb(205,22,4)"/><text x="75.9717%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (124 samples, 0.23%)</title><rect x="76.0215%" y="149" width="0.2253%" height="15" fill="rgb(206,3,8)"/><text x="76.2715%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (110 samples, 0.20%)</title><rect x="76.4575%" y="133" width="0.1999%" height="15" fill="rgb(251,23,15)"/><text x="76.7075%" y="143.50"></text></g><g><title>webserver`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (499 samples, 0.91%)</title><rect x="76.2613%" y="149" width="0.9066%" height="15" fill="rgb(252,88,28)"/><text x="76.5113%" y="159.50"></text></g><g><title>webserver`core::hash::sip::Hasher&lt;S&gt;::reset (281 samples, 0.51%)</title><rect x="76.6574%" y="133" width="0.5105%" height="15" fill="rgb(212,127,14)"/><text x="76.9074%" y="143.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (896 samples, 1.63%)</title><rect x="75.5746%" y="181" width="1.6279%" height="15" fill="rgb(247,145,37)"/><text x="75.8246%" y="191.50"></text></g><g><title>webserver`core::hash::sip::SipHasher13::new_with_keys (686 samples, 1.25%)</title><rect x="75.9561%" y="165" width="1.2463%" height="15" fill="rgb(209,117,53)"/><text x="76.2061%" y="175.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::rotate_left (209 samples, 0.38%)</title><rect x="78.9048%" y="85" width="0.3797%" height="15" fill="rgb(212,90,42)"/><text x="79.1548%" y="95.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (889 samples, 1.62%)</title><rect x="78.0509%" y="101" width="1.6152%" height="15" fill="rgb(218,164,37)"/><text x="78.3009%" y="111.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::wrapping_add (210 samples, 0.38%)</title><rect x="79.2845%" y="85" width="0.3815%" height="15" fill="rgb(246,65,34)"/><text x="79.5345%" y="95.50"></text></g><g><title>webserver`core::intrinsics::copy_nonoverlapping (114 samples, 0.21%)</title><rect x="79.7387%" y="101" width="0.2071%" height="15" fill="rgb(231,100,33)"/><text x="79.9887%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (72 samples, 0.13%)</title><rect x="79.8150%" y="85" width="0.1308%" height="15" fill="rgb(228,126,14)"/><text x="80.0650%" y="95.50"></text></g><g><title>webserver`core::num::_&lt;impl u64&gt;::rotate_left (69 samples, 0.13%)</title><rect x="79.9459%" y="101" width="0.1254%" height="15" fill="rgb(215,173,21)"/><text x="80.1959%" y="111.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (152 samples, 0.28%)</title><rect x="80.4310%" y="69" width="0.2762%" height="15" fill="rgb(210,6,40)"/><text x="80.6810%" y="79.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::offset (95 samples, 0.17%)</title><rect x="80.5345%" y="53" width="0.1726%" height="15" fill="rgb(212,48,18)"/><text x="80.7845%" y="63.50"></text></g><g><title>webserver`&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (283 samples, 0.51%)</title><rect x="80.2438%" y="85" width="0.5142%" height="15" fill="rgb(230,214,11)"/><text x="80.4938%" y="95.50"></text></g><g><title>webserver`core::slice::_&lt;impl [T]&gt;::get_unchecked (355 samples, 0.64%)</title><rect x="80.1384%" y="101" width="0.6450%" height="15" fill="rgb(254,105,39)"/><text x="80.3884%" y="111.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,844 samples, 3.35%)</title><rect x="77.4859%" y="117" width="3.3502%" height="15" fill="rgb(245,158,5)"/><text x="77.7359%" y="127.50">web..</text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,950 samples, 3.54%)</title><rect x="77.3932%" y="149" width="3.5428%" height="15" fill="rgb(249,208,11)"/><text x="77.6432%" y="159.50">webs..</text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,918 samples, 3.48%)</title><rect x="77.4514%" y="133" width="3.4847%" height="15" fill="rgb(210,39,28)"/><text x="77.7014%" y="143.50">web..</text></g><g><title>webserver`core::hash::Hasher::write_u64 (2,042 samples, 3.71%)</title><rect x="77.2824%" y="165" width="3.7100%" height="15" fill="rgb(211,56,53)"/><text x="77.5324%" y="175.50">webs..</text></g><g><title>webserver`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2,082 samples, 3.78%)</title><rect x="77.2224%" y="181" width="3.7826%" height="15" fill="rgb(226,201,30)"/><text x="77.4724%" y="191.50">webs..</text></g><g><title>webserver`hashbrown::map::make_hash (7,281 samples, 13.23%)</title><rect x="67.8004%" y="197" width="13.2283%" height="15" fill="rgb(239,101,34)"/><text x="68.0504%" y="207.50">webserver`hashbrown:..</text></g><g><title>webserver`&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (183 samples, 0.33%)</title><rect x="82.5966%" y="181" width="0.3325%" height="15" fill="rgb(226,209,5)"/><text x="82.8466%" y="191.50"></text></g><g><title>webserver`&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (120 samples, 0.22%)</title><rect x="83.3052%" y="165" width="0.2180%" height="15" fill="rgb(250,105,47)"/><text x="83.5552%" y="175.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::ok_or (81 samples, 0.15%)</title><rect x="83.3760%" y="149" width="0.1472%" height="15" fill="rgb(230,72,3)"/><text x="83.6260%" y="159.50"></text></g><g><title>webserver`hashbrown::raw::bitmask::BitMask::lowest_set_bit (203 samples, 0.37%)</title><rect x="83.5377%" y="165" width="0.3688%" height="15" fill="rgb(232,218,39)"/><text x="83.7877%" y="175.50"></text></g><g><title>webserver`hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (113 samples, 0.21%)</title><rect x="83.7012%" y="149" width="0.2053%" height="15" fill="rgb(248,166,6)"/><text x="83.9512%" y="159.50"></text></g><g><title>webserver`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (510 samples, 0.93%)</title><rect x="83.0254%" y="181" width="0.9266%" height="15" fill="rgb(247,89,20)"/><text x="83.2754%" y="191.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (1,448 samples, 2.63%)</title><rect x="84.1009%" y="181" width="2.6308%" height="15" fill="rgb(248,130,54)"/><text x="84.3509%" y="191.50">we..</text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u64&gt;::eq (1,343 samples, 2.44%)</title><rect x="84.2917%" y="165" width="2.4400%" height="15" fill="rgb(234,196,4)"/><text x="84.5417%" y="175.50">we..</text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (122 samples, 0.22%)</title><rect x="87.1369%" y="149" width="0.2217%" height="15" fill="rgb(250,143,31)"/><text x="87.3869%" y="159.50"></text></g><g><title>webserver`core::ptr::const_ptr::_&lt;impl *const T&gt;::offset (81 samples, 0.15%)</title><rect x="87.2114%" y="133" width="0.1472%" height="15" fill="rgb(211,110,34)"/><text x="87.4614%" y="143.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::bucket (285 samples, 0.52%)</title><rect x="86.8571%" y="181" width="0.5178%" height="15" fill="rgb(215,124,48)"/><text x="87.1071%" y="191.50"></text></g><g><title>webserver`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (215 samples, 0.39%)</title><rect x="86.9842%" y="165" width="0.3906%" height="15" fill="rgb(216,46,13)"/><text x="87.2342%" y="175.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (139 samples, 0.25%)</title><rect x="87.5075%" y="165" width="0.2525%" height="15" fill="rgb(205,184,25)"/><text x="87.7575%" y="175.50"></text></g><g><title>webserver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::offset (91 samples, 0.17%)</title><rect x="87.5947%" y="149" width="0.1653%" height="15" fill="rgb(228,1,10)"/><text x="87.8447%" y="159.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::ctrl (244 samples, 0.44%)</title><rect x="87.3749%" y="181" width="0.4433%" height="15" fill="rgb(213,116,27)"/><text x="87.6249%" y="191.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::probe_seq (130 samples, 0.24%)</title><rect x="87.8182%" y="181" width="0.2362%" height="15" fill="rgb(241,95,50)"/><text x="88.0682%" y="191.50"></text></g><g><title>webserver`core::cmp::min_by (181 samples, 0.33%)</title><rect x="88.2124%" y="149" width="0.3288%" height="15" fill="rgb(238,48,32)"/><text x="88.4624%" y="159.50"></text></g><g><title>webserver`core::ops::function::FnOnce::call_once (92 samples, 0.17%)</title><rect x="88.3741%" y="133" width="0.1671%" height="15" fill="rgb(235,113,49)"/><text x="88.6241%" y="143.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (59 samples, 0.11%)</title><rect x="88.4341%" y="117" width="0.1072%" height="15" fill="rgb(205,127,43)"/><text x="88.6841%" y="127.50"></text></g><g><title>webserver`core::cmp::Ord::min (210 samples, 0.38%)</title><rect x="88.1688%" y="165" width="0.3815%" height="15" fill="rgb(250,162,2)"/><text x="88.4188%" y="175.50"></text></g><g><title>webserver`hashbrown::raw::h2 (260 samples, 0.47%)</title><rect x="88.0852%" y="181" width="0.4724%" height="15" fill="rgb(220,13,41)"/><text x="88.3352%" y="191.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_undefined_si128 (73 samples, 0.13%)</title><rect x="89.1045%" y="149" width="0.1326%" height="15" fill="rgb(249,221,25)"/><text x="89.3545%" y="159.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_loadu_si128 (653 samples, 1.19%)</title><rect x="88.7647%" y="165" width="1.1864%" height="15" fill="rgb(215,208,19)"/><text x="89.0147%" y="175.50"></text></g><g><title>webserver`core::intrinsics::copy_nonoverlapping (393 samples, 0.71%)</title><rect x="89.2371%" y="149" width="0.7140%" height="15" fill="rgb(236,175,2)"/><text x="89.4871%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (356 samples, 0.65%)</title><rect x="89.3043%" y="133" width="0.6468%" height="15" fill="rgb(241,52,2)"/><text x="89.5543%" y="143.50"></text></g><g><title>webserver`hashbrown::raw::sse2::Group::load (778 samples, 1.41%)</title><rect x="88.5576%" y="181" width="1.4135%" height="15" fill="rgb(248,140,14)"/><text x="88.8076%" y="191.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (330 samples, 0.60%)</title><rect x="90.3672%" y="165" width="0.5996%" height="15" fill="rgb(253,22,42)"/><text x="90.6172%" y="175.50"></text></g><g><title>webserver`core::core_arch::x86::m128iExt::as_i8x16 (135 samples, 0.25%)</title><rect x="90.7215%" y="149" width="0.2453%" height="15" fill="rgb(234,61,47)"/><text x="90.9715%" y="159.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_movemask_epi8 (287 samples, 0.52%)</title><rect x="90.9667%" y="165" width="0.5214%" height="15" fill="rgb(208,226,15)"/><text x="91.2167%" y="175.50"></text></g><g><title>webserver`core::core_arch::x86::m128iExt::as_i8x16 (145 samples, 0.26%)</title><rect x="91.2247%" y="149" width="0.2634%" height="15" fill="rgb(217,221,4)"/><text x="91.4747%" y="159.50"></text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_set1_epi8 (980 samples, 1.78%)</title><rect x="91.4882%" y="165" width="1.7805%" height="15" fill="rgb(212,174,34)"/><text x="91.7382%" y="175.50">w..</text></g><g><title>webserver`core::core_arch::x86::sse2::_mm_set_epi8 (821 samples, 1.49%)</title><rect x="91.7770%" y="149" width="1.4916%" height="15" fill="rgb(253,83,4)"/><text x="92.0270%" y="159.50"></text></g><g><title>webserver`core::core_arch::simd::i8x16::new (298 samples, 0.54%)</title><rect x="92.7272%" y="133" width="0.5414%" height="15" fill="rgb(250,195,49)"/><text x="92.9772%" y="143.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (6,726 samples, 12.22%)</title><rect x="81.0578%" y="197" width="12.2200%" height="15" fill="rgb(241,192,25)"/><text x="81.3078%" y="207.50">webserver`hashbrow..</text></g><g><title>webserver`hashbrown::raw::sse2::Group::match_byte (1,820 samples, 3.31%)</title><rect x="89.9711%" y="181" width="3.3066%" height="15" fill="rgb(208,124,10)"/><text x="90.2211%" y="191.50">web..</text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (14,419 samples, 26.20%)</title><rect x="67.1263%" y="213" width="26.1968%" height="15" fill="rgb(222,33,0)"/><text x="67.3763%" y="223.50">webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::..</text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (14,613 samples, 26.55%)</title><rect x="66.7993%" y="229" width="26.5493%" height="15" fill="rgb(234,209,28)"/><text x="67.0493%" y="239.50">webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::..</text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::stop (16,132 samples, 29.31%)</title><rect x="64.0486%" y="261" width="29.3091%" height="15" fill="rgb(224,11,23)"/><text x="64.2986%" y="271.50">webserver`transit_radar::gtfs::db::GTFSData::st..</text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14,686 samples, 26.68%)</title><rect x="66.6758%" y="245" width="26.6819%" height="15" fill="rgb(232,99,1)"/><text x="66.9258%" y="255.50">webserver`std::collections::hash::map::Hash..</text></g><g><title>webserver`core::cmp::PartialEq::ne (130 samples, 0.24%)</title><rect x="93.6102%" y="229" width="0.2362%" height="15" fill="rgb(237,95,45)"/><text x="93.8602%" y="239.50"></text></g><g><title>webserver`&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (93 samples, 0.17%)</title><rect x="93.6774%" y="213" width="0.1690%" height="15" fill="rgb(208,109,11)"/><text x="93.9274%" y="223.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u32&gt;::partial_cmp (95 samples, 0.17%)</title><rect x="93.8464%" y="229" width="0.1726%" height="15" fill="rgb(216,190,48)"/><text x="94.0964%" y="239.50"></text></g><g><title>webserver`core::cmp::impls::_&lt;impl core::cmp::Ord for u32&gt;::cmp (57 samples, 0.10%)</title><rect x="93.9154%" y="213" width="0.1036%" height="15" fill="rgb(251,171,36)"/><text x="94.1654%" y="223.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Time as core::cmp::PartialOrd&gt;::le (363 samples, 0.66%)</title><rect x="93.4849%" y="245" width="0.6595%" height="15" fill="rgb(230,62,22)"/><text x="93.7349%" y="255.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::unwrap_or (69 samples, 0.13%)</title><rect x="94.0190%" y="229" width="0.1254%" height="15" fill="rgb(225,114,35)"/><text x="94.2690%" y="239.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::time::Time as core::cmp::PartialOrd&gt;::lt (174 samples, 0.32%)</title><rect x="94.1444%" y="245" width="0.3161%" height="15" fill="rgb(215,118,42)"/><text x="94.3944%" y="255.50"></text></g><g><title>webserver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18,611 samples, 33.81%)</title><rect x="60.7002%" y="293" width="33.8130%" height="15" fill="rgb(243,119,21)"/><text x="60.9502%" y="303.50">webserver`core::ops::function::impls::_&lt;impl core::ops:..</text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::trips_from::_{{closure}} (18,546 samples, 33.69%)</title><rect x="60.8183%" y="277" width="33.6949%" height="15" fill="rgb(252,177,53)"/><text x="61.0683%" y="287.50">webserver`transit_radar::journey_graph::JourneyGraphPlo..</text></g><g><title>webserver`transit_radar::gtfs::time::Period::contains (636 samples, 1.16%)</title><rect x="93.3577%" y="261" width="1.1555%" height="15" fill="rgb(237,209,29)"/><text x="93.6077%" y="271.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (18,682 samples, 33.94%)</title><rect x="60.5821%" y="309" width="33.9420%" height="15" fill="rgb(212,65,23)"/><text x="60.8321%" y="319.50">webserver`core::iter::traits::iterator::Iterator::find:..</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::find (19,489 samples, 35.41%)</title><rect x="59.2340%" y="341" width="35.4082%" height="15" fill="rgb(230,222,46)"/><text x="59.4840%" y="351.50">webserver`core::iter::traits::iterator::Iterator::find</text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (19,462 samples, 35.36%)</title><rect x="59.2831%" y="325" width="35.3591%" height="15" fill="rgb(215,135,32)"/><text x="59.5331%" y="335.50">webserver`core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>webserver`&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,490 samples, 35.41%)</title><rect x="59.2340%" y="357" width="35.4100%" height="15" fill="rgb(246,101,22)"/><text x="59.4840%" y="367.50">webserver`&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter..</text></g><g><title>webserver`&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (59 samples, 0.11%)</title><rect x="94.8874%" y="293" width="0.1072%" height="15" fill="rgb(206,107,13)"/><text x="95.1374%" y="303.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (160 samples, 0.29%)</title><rect x="94.8348%" y="309" width="0.2907%" height="15" fill="rgb(250,100,44)"/><text x="95.0848%" y="319.50"></text></g><g><title>webserver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (174 samples, 0.32%)</title><rect x="94.8166%" y="325" width="0.3161%" height="15" fill="rgb(231,147,38)"/><text x="95.0666%" y="335.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::reserve (177 samples, 0.32%)</title><rect x="94.8148%" y="341" width="0.3216%" height="15" fill="rgb(229,8,40)"/><text x="95.0648%" y="351.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::push (201 samples, 0.37%)</title><rect x="94.7857%" y="357" width="0.3652%" height="15" fill="rgb(221,135,30)"/><text x="95.0357%" y="367.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (67 samples, 0.12%)</title><rect x="95.2817%" y="325" width="0.1217%" height="15" fill="rgb(249,193,18)"/><text x="95.5317%" y="335.50"></text></g><g><title>webserver`std::collections::hash::set::HashSet&lt;T,S&gt;::insert (70 samples, 0.13%)</title><rect x="95.2781%" y="357" width="0.1272%" height="15" fill="rgb(209,133,39)"/><text x="95.5281%" y="367.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (68 samples, 0.12%)</title><rect x="95.2817%" y="341" width="0.1235%" height="15" fill="rgb(232,100,14)"/><text x="95.5317%" y="351.50"></text></g><g><title>webserver`core::option::Option&lt;T&gt;::and_then (72 samples, 0.13%)</title><rect x="95.4089%" y="341" width="0.1308%" height="15" fill="rgb(224,185,1)"/><text x="95.6589%" y="351.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_route_for_trip::_{{closure}} (70 samples, 0.13%)</title><rect x="95.4125%" y="325" width="0.1272%" height="15" fill="rgb(223,139,8)"/><text x="95.6625%" y="335.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (69 samples, 0.13%)</title><rect x="95.4143%" y="309" width="0.1254%" height="15" fill="rgb(232,213,38)"/><text x="95.6643%" y="319.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (68 samples, 0.12%)</title><rect x="95.4161%" y="293" width="0.1235%" height="15" fill="rgb(207,94,22)"/><text x="95.6661%" y="303.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (68 samples, 0.12%)</title><rect x="95.4161%" y="277" width="0.1235%" height="15" fill="rgb(219,183,54)"/><text x="95.6661%" y="287.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_route_for_trip (126 samples, 0.23%)</title><rect x="95.4071%" y="357" width="0.2289%" height="15" fill="rgb(216,185,54)"/><text x="95.6571%" y="367.50"></text></g><g><title>webserver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (120 samples, 0.22%)</title><rect x="95.8340%" y="229" width="0.2180%" height="15" fill="rgb(254,217,39)"/><text x="96.0840%" y="239.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (190 samples, 0.35%)</title><rect x="95.7359%" y="277" width="0.3452%" height="15" fill="rgb(240,178,23)"/><text x="95.9859%" y="287.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (187 samples, 0.34%)</title><rect x="95.7414%" y="261" width="0.3397%" height="15" fill="rgb(218,11,47)"/><text x="95.9914%" y="271.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (186 samples, 0.34%)</title><rect x="95.7432%" y="245" width="0.3379%" height="15" fill="rgb(218,51,51)"/><text x="95.9932%" y="255.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (86 samples, 0.16%)</title><rect x="96.1810%" y="197" width="0.1562%" height="15" fill="rgb(238,126,27)"/><text x="96.4310%" y="207.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (91 samples, 0.17%)</title><rect x="96.1774%" y="229" width="0.1653%" height="15" fill="rgb(249,202,22)"/><text x="96.4274%" y="239.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (90 samples, 0.16%)</title><rect x="96.1792%" y="213" width="0.1635%" height="15" fill="rgb(254,195,49)"/><text x="96.4292%" y="223.50"></text></g><g><title>webserver`&lt;transit_radar::gtfs::model::id::StopId as core::hash::Hash&gt;::hash (98 samples, 0.18%)</title><rect x="96.1665%" y="277" width="0.1780%" height="15" fill="rgb(208,123,14)"/><text x="96.4165%" y="287.50"></text></g><g><title>webserver`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (98 samples, 0.18%)</title><rect x="96.1665%" y="261" width="0.1780%" height="15" fill="rgb(224,200,8)"/><text x="96.4165%" y="271.50"></text></g><g><title>webserver`core::hash::Hasher::write_u64 (94 samples, 0.17%)</title><rect x="96.1738%" y="245" width="0.1708%" height="15" fill="rgb(217,61,36)"/><text x="96.4238%" y="255.50"></text></g><g><title>webserver`hashbrown::map::make_hash (342 samples, 0.62%)</title><rect x="95.7286%" y="293" width="0.6214%" height="15" fill="rgb(206,35,45)"/><text x="95.9786%" y="303.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (331 samples, 0.60%)</title><rect x="96.3500%" y="293" width="0.6014%" height="15" fill="rgb(217,65,33)"/><text x="96.6000%" y="303.50"></text></g><g><title>webserver`hashbrown::raw::sse2::Group::match_byte (88 samples, 0.16%)</title><rect x="96.7915%" y="277" width="0.1599%" height="15" fill="rgb(222,158,48)"/><text x="97.0415%" y="287.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (703 samples, 1.28%)</title><rect x="95.6832%" y="309" width="1.2772%" height="15" fill="rgb(254,2,54)"/><text x="95.9332%" y="319.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_stop (731 samples, 1.33%)</title><rect x="95.6360%" y="357" width="1.3281%" height="15" fill="rgb(250,143,38)"/><text x="95.8860%" y="367.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (730 samples, 1.33%)</title><rect x="95.6378%" y="341" width="1.3263%" height="15" fill="rgb(248,25,0)"/><text x="95.8878%" y="351.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (723 samples, 1.31%)</title><rect x="95.6505%" y="325" width="1.3136%" height="15" fill="rgb(206,152,27)"/><text x="95.9005%" y="335.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (69 samples, 0.13%)</title><rect x="97.0658%" y="293" width="0.1254%" height="15" fill="rgb(240,77,30)"/><text x="97.3158%" y="303.50"></text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::enqueue_connections_and_trips (21,036 samples, 38.22%)</title><rect x="58.9742%" y="373" width="38.2188%" height="15" fill="rgb(231,5,3)"/><text x="59.2242%" y="383.50">webserver`transit_radar::journey_graph::JourneyGraphPlotter::e..</text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::trips_from (81 samples, 0.15%)</title><rect x="97.0458%" y="357" width="0.1472%" height="15" fill="rgb(207,226,32)"/><text x="97.2958%" y="367.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_departures_from (77 samples, 0.14%)</title><rect x="97.0531%" y="341" width="0.1399%" height="15" fill="rgb(222,207,47)"/><text x="97.3031%" y="351.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (73 samples, 0.13%)</title><rect x="97.0604%" y="325" width="0.1326%" height="15" fill="rgb(229,115,45)"/><text x="97.3104%" y="335.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (71 samples, 0.13%)</title><rect x="97.0640%" y="309" width="0.1290%" height="15" fill="rgb(224,191,6)"/><text x="97.3140%" y="319.50"></text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::enqueue_transfers_from_station (135 samples, 0.25%)</title><rect x="97.1985%" y="373" width="0.2453%" height="15" fill="rgb(230,227,24)"/><text x="97.4485%" y="383.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (87 samples, 0.16%)</title><rect x="97.5218%" y="197" width="0.1581%" height="15" fill="rgb(228,80,19)"/><text x="97.7718%" y="207.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (116 samples, 0.21%)</title><rect x="97.5037%" y="261" width="0.2108%" height="15" fill="rgb(247,229,0)"/><text x="97.7537%" y="271.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (112 samples, 0.20%)</title><rect x="97.5109%" y="245" width="0.2035%" height="15" fill="rgb(237,194,15)"/><text x="97.7609%" y="255.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::extend_desugared::_{{closure}} (110 samples, 0.20%)</title><rect x="97.5146%" y="229" width="0.1999%" height="15" fill="rgb(219,203,20)"/><text x="97.7646%" y="239.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (109 samples, 0.20%)</title><rect x="97.5164%" y="213" width="0.1980%" height="15" fill="rgb(234,128,8)"/><text x="97.7664%" y="223.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::try_fold (133 samples, 0.24%)</title><rect x="97.4764%" y="277" width="0.2416%" height="15" fill="rgb(248,202,8)"/><text x="97.7264%" y="287.50"></text></g><g><title>webserver`&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (143 samples, 0.26%)</title><rect x="97.4655%" y="357" width="0.2598%" height="15" fill="rgb(206,104,37)"/><text x="97.7155%" y="367.50"></text></g><g><title>webserver`&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as alloc::collections::SpecExtend&lt;I&gt;&gt;::spec_extend (143 samples, 0.26%)</title><rect x="97.4655%" y="341" width="0.2598%" height="15" fill="rgb(223,8,27)"/><text x="97.7155%" y="351.50"></text></g><g><title>webserver`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::extend_desugared (141 samples, 0.26%)</title><rect x="97.4692%" y="325" width="0.2562%" height="15" fill="rgb(216,217,28)"/><text x="97.7192%" y="335.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::for_each (138 samples, 0.25%)</title><rect x="97.4746%" y="309" width="0.2507%" height="15" fill="rgb(249,199,1)"/><text x="97.7246%" y="319.50"></text></g><g><title>webserver`core::iter::traits::iterator::Iterator::fold (137 samples, 0.25%)</title><rect x="97.4764%" y="293" width="0.2489%" height="15" fill="rgb(240,85,17)"/><text x="97.7264%" y="303.50"></text></g><g><title>webserver`alloc::vec::Vec&lt;T&gt;::push (62 samples, 0.11%)</title><rect x="97.7508%" y="357" width="0.1126%" height="15" fill="rgb(206,108,45)"/><text x="98.0008%" y="367.50"></text></g><g><title>webserver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (67 samples, 0.12%)</title><rect x="97.8907%" y="245" width="0.1217%" height="15" fill="rgb(245,210,41)"/><text x="98.1407%" y="255.50"></text></g><g><title>webserver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (69 samples, 0.13%)</title><rect x="97.8888%" y="277" width="0.1254%" height="15" fill="rgb(206,13,37)"/><text x="98.1388%" y="287.50"></text></g><g><title>webserver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (68 samples, 0.12%)</title><rect x="97.8907%" y="261" width="0.1235%" height="15" fill="rgb(250,61,18)"/><text x="98.1407%" y="271.50"></text></g><g><title>webserver`hashbrown::map::make_hash (119 samples, 0.22%)</title><rect x="97.8852%" y="293" width="0.2162%" height="15" fill="rgb(235,172,48)"/><text x="98.1352%" y="303.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (105 samples, 0.19%)</title><rect x="98.1014%" y="293" width="0.1908%" height="15" fill="rgb(249,201,17)"/><text x="98.3514%" y="303.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (229 samples, 0.42%)</title><rect x="97.8798%" y="341" width="0.4161%" height="15" fill="rgb(219,208,6)"/><text x="98.1298%" y="351.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (227 samples, 0.41%)</title><rect x="97.8834%" y="325" width="0.4124%" height="15" fill="rgb(248,31,23)"/><text x="98.1334%" y="335.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (226 samples, 0.41%)</title><rect x="97.8852%" y="309" width="0.4106%" height="15" fill="rgb(245,15,42)"/><text x="98.1352%" y="319.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (232 samples, 0.42%)</title><rect x="97.8761%" y="357" width="0.4215%" height="15" fill="rgb(222,217,39)"/><text x="98.1261%" y="367.50"></text></g><g><title>webserver`hashbrown::map::make_hash (88 samples, 0.16%)</title><rect x="98.3140%" y="293" width="0.1599%" height="15" fill="rgb(210,219,27)"/><text x="98.5640%" y="303.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (173 samples, 0.31%)</title><rect x="98.3049%" y="309" width="0.3143%" height="15" fill="rgb(252,166,36)"/><text x="98.5549%" y="319.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (79 samples, 0.14%)</title><rect x="98.4757%" y="293" width="0.1435%" height="15" fill="rgb(245,132,34)"/><text x="98.7257%" y="303.50"></text></g><g><title>webserver`transit_radar::gtfs::db::GTFSData::get_stop (178 samples, 0.32%)</title><rect x="98.2976%" y="357" width="0.3234%" height="15" fill="rgb(236,54,3)"/><text x="98.5476%" y="367.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (177 samples, 0.32%)</title><rect x="98.2994%" y="341" width="0.3216%" height="15" fill="rgb(241,173,43)"/><text x="98.5494%" y="351.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (176 samples, 0.32%)</title><rect x="98.3013%" y="325" width="0.3198%" height="15" fill="rgb(215,190,9)"/><text x="98.5513%" y="335.50"></text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::enqueue_transfers_from_stop (675 samples, 1.23%)</title><rect x="97.4437%" y="373" width="1.2264%" height="15" fill="rgb(242,101,16)"/><text x="97.6937%" y="383.50"></text></g><g><title>webserver`hashbrown::map::make_hash (99 samples, 0.18%)</title><rect x="98.8172%" y="309" width="0.1799%" height="15" fill="rgb(223,190,21)"/><text x="99.0672%" y="319.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::find (119 samples, 0.22%)</title><rect x="98.9971%" y="309" width="0.2162%" height="15" fill="rgb(215,228,25)"/><text x="99.2471%" y="319.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (231 samples, 0.42%)</title><rect x="98.7954%" y="357" width="0.4197%" height="15" fill="rgb(225,36,22)"/><text x="99.0454%" y="367.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get (228 samples, 0.41%)</title><rect x="98.8009%" y="341" width="0.4142%" height="15" fill="rgb(251,106,46)"/><text x="99.0509%" y="351.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (226 samples, 0.41%)</title><rect x="98.8045%" y="325" width="0.4106%" height="15" fill="rgb(208,90,1)"/><text x="99.0545%" y="335.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve (79 samples, 0.14%)</title><rect x="99.3914%" y="309" width="0.1435%" height="15" fill="rgb(243,10,4)"/><text x="99.6414%" y="319.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (79 samples, 0.14%)</title><rect x="99.3914%" y="293" width="0.1435%" height="15" fill="rgb(212,137,27)"/><text x="99.6414%" y="303.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::resize (77 samples, 0.14%)</title><rect x="99.3950%" y="277" width="0.1399%" height="15" fill="rgb(231,220,49)"/><text x="99.6450%" y="287.50"></text></g><g><title>webserver`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (180 samples, 0.33%)</title><rect x="99.2169%" y="341" width="0.3270%" height="15" fill="rgb(237,96,20)"/><text x="99.4669%" y="351.50"></text></g><g><title>webserver`hashbrown::raw::RawTable&lt;T&gt;::insert (105 samples, 0.19%)</title><rect x="99.3532%" y="325" width="0.1908%" height="15" fill="rgb(239,229,30)"/><text x="99.6032%" y="335.50"></text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::set_arrival_time (472 samples, 0.86%)</title><rect x="98.6883%" y="373" width="0.8575%" height="15" fill="rgb(219,65,33)"/><text x="98.9383%" y="383.50"></text></g><g><title>webserver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (182 samples, 0.33%)</title><rect x="99.2151%" y="357" width="0.3307%" height="15" fill="rgb(243,134,7)"/><text x="99.4651%" y="367.50"></text></g><g><title>webserver`&lt;transit_radar::journey_graph::JourneyGraphPlotter as core::iter::traits::iterator::Iterator&gt;::next (23,499 samples, 42.69%)</title><rect x="56.8540%" y="421" width="42.6936%" height="15" fill="rgb(216,177,54)"/><text x="57.1040%" y="431.50">webserver`&lt;transit_radar::journey_graph::JourneyGraphPlotter as core::..</text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::next_block (23,480 samples, 42.66%)</title><rect x="56.8885%" y="405" width="42.6591%" height="15" fill="rgb(211,160,20)"/><text x="57.1385%" y="415.50">webserver`transit_radar::journey_graph::JourneyGraphPlotter::next_block</text></g><g><title>webserver`transit_radar::journey_graph::JourneyGraphPlotter::process_queue_item (22,511 samples, 40.90%)</title><rect x="58.6490%" y="389" width="40.8986%" height="15" fill="rgb(239,85,39)"/><text x="58.8990%" y="399.50">webserver`transit_radar::journey_graph::JourneyGraphPlotter::proces..</text></g><g><title>webserver`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24,641 samples, 44.77%)</title><rect x="55.1861%" y="485" width="44.7684%" height="15" fill="rgb(232,125,22)"/><text x="55.4361%" y="495.50">webserver`&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>webserver`webserver::json_tree_handler::_{{closure}} (24,641 samples, 44.77%)</title><rect x="55.1861%" y="469" width="44.7684%" height="15" fill="rgb(244,57,34)"/><text x="55.4361%" y="479.50">webserver`webserver::json_tree_handler::_{{closure}}</text></g><g><title>webserver`webserver::lookup (24,315 samples, 44.18%)</title><rect x="55.7784%" y="453" width="44.1762%" height="15" fill="rgb(214,203,32)"/><text x="56.0284%" y="463.50">webserver`webserver::lookup</text></g><g><title>webserver`webserver::produce_tree_json (23,744 samples, 43.14%)</title><rect x="56.8158%" y="437" width="43.1388%" height="15" fill="rgb(207,58,43)"/><text x="57.0658%" y="447.50">webserver`webserver::produce_tree_json</text></g><g><title>webserver`&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (24,645 samples, 44.78%)</title><rect x="55.1861%" y="565" width="44.7757%" height="15" fill="rgb(215,193,15)"/><text x="55.4361%" y="575.50">webserver`&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::fut..</text></g><g><title>webserver`&lt;warp::filters::cors::internal::WrappedFuture&lt;F&gt; as core::future::future::Future&gt;::poll (24,645 samples, 44.78%)</title><rect x="55.1861%" y="549" width="44.7757%" height="15" fill="rgb(232,15,44)"/><text x="55.4361%" y="559.50">webserver`&lt;warp::filters::cors::internal::WrappedFuture&lt;F&gt; as core::futur..</text></g><g><title>webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll (24,645 samples, 44.78%)</title><rect x="55.1861%" y="533" width="44.7757%" height="15" fill="rgb(212,3,48)"/><text x="55.4361%" y="543.50">webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>webserver`&lt;warp::filter::and_then::AndThenFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (24,645 samples, 44.78%)</title><rect x="55.1861%" y="517" width="44.7757%" height="15" fill="rgb(218,128,7)"/><text x="55.4361%" y="527.50">webserver`&lt;warp::filter::and_then::AndThenFuture&lt;T,F&gt; as core::future::fu..</text></g><g><title>webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll (24,645 samples, 44.78%)</title><rect x="55.1861%" y="501" width="44.7757%" height="15" fill="rgb(226,216,39)"/><text x="55.4361%" y="511.50">webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>webserver`&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll::_{{closure}} (24,660 samples, 44.80%)</title><rect x="55.1861%" y="661" width="44.8030%" height="15" fill="rgb(243,47,51)"/><text x="55.4361%" y="671.50">webserver`&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::futu..</text></g><g><title>webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll (24,660 samples, 44.80%)</title><rect x="55.1861%" y="645" width="44.8030%" height="15" fill="rgb(241,183,40)"/><text x="55.4361%" y="655.50">webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>webserver`&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::Future&gt;::poll (24,660 samples, 44.80%)</title><rect x="55.1861%" y="629" width="44.8030%" height="15" fill="rgb(231,217,32)"/><text x="55.4361%" y="639.50">webserver`&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::F..</text></g><g><title>webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll (24,660 samples, 44.80%)</title><rect x="55.1861%" y="613" width="44.8030%" height="15" fill="rgb(229,61,38)"/><text x="55.4361%" y="623.50">webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>webserver`&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::Future&gt;::poll (24,660 samples, 44.80%)</title><rect x="55.1861%" y="597" width="44.8030%" height="15" fill="rgb(225,210,5)"/><text x="55.4361%" y="607.50">webserver`&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::F..</text></g><g><title>webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll (24,660 samples, 44.80%)</title><rect x="55.1861%" y="581" width="44.8030%" height="15" fill="rgb(231,79,45)"/><text x="55.4361%" y="591.50">webserver`&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>webserver`&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll (24,663 samples, 44.81%)</title><rect x="55.1825%" y="709" width="44.8084%" height="15" fill="rgb(224,100,7)"/><text x="55.4325%" y="719.50">webserver`&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::futu..</text></g><g><title>webserver`warp::route::set (24,661 samples, 44.80%)</title><rect x="55.1861%" y="693" width="44.8048%" height="15" fill="rgb(241,198,18)"/><text x="55.4361%" y="703.50">webserver`warp::route::set</text></g><g><title>webserver`scoped_tls::ScopedKey&lt;T&gt;::set (24,661 samples, 44.80%)</title><rect x="55.1861%" y="677" width="44.8048%" height="15" fill="rgb(252,97,53)"/><text x="55.4361%" y="687.50">webserver`scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>webserver`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (24,664 samples, 44.81%)</title><rect x="55.1825%" y="725" width="44.8102%" height="15" fill="rgb(220,88,7)"/><text x="55.4325%" y="735.50">webserver`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; ..</text></g><g><title>webserver`tokio::loom::std::causal_cell::CausalCell&lt;T&gt;::with_mut (24,707 samples, 44.89%)</title><rect x="55.1062%" y="1013" width="44.8884%" height="15" fill="rgb(213,176,14)"/><text x="55.3562%" y="1023.50">webserver`tokio::loom::std::causal_cell::CausalCell&lt;T&gt;::with_mut</text></g><g><title>webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (24,707 samples, 44.89%)</title><rect x="55.1062%" y="997" width="44.8884%" height="15" fill="rgb(246,73,7)"/><text x="55.3562%" y="1007.50">webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>webserver`std::panic::catch_unwind (24,707 samples, 44.89%)</title><rect x="55.1062%" y="981" width="44.8884%" height="15" fill="rgb(245,64,36)"/><text x="55.3562%" y="991.50">webserver`std::panic::catch_unwind</text></g><g><title>webserver`std::panicking::try (24,707 samples, 44.89%)</title><rect x="55.1062%" y="965" width="44.8884%" height="15" fill="rgb(245,80,10)"/><text x="55.3562%" y="975.50">webserver`std::panicking::try</text></g><g><title>webserver`__rust_maybe_catch_panic (24,707 samples, 44.89%)</title><rect x="55.1062%" y="949" width="44.8884%" height="15" fill="rgb(232,107,50)"/><text x="55.3562%" y="959.50">webserver`__rust_maybe_catch_panic</text></g><g><title>webserver`std::panicking::try::do_call (24,707 samples, 44.89%)</title><rect x="55.1062%" y="933" width="44.8884%" height="15" fill="rgb(253,3,0)"/><text x="55.3562%" y="943.50">webserver`std::panicking::try::do_call</text></g><g><title>webserver`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24,707 samples, 44.89%)</title><rect x="55.1062%" y="917" width="44.8884%" height="15" fill="rgb(212,99,53)"/><text x="55.3562%" y="927.50">webserver`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;..</text></g><g><title>webserver`core::ops::function::FnOnce::call_once (24,707 samples, 44.89%)</title><rect x="55.1062%" y="901" width="44.8884%" height="15" fill="rgb(249,111,54)"/><text x="55.3562%" y="911.50">webserver`core::ops::function::FnOnce::call_once</text></g><g><title>webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}::_{{closure}} (24,707 samples, 44.89%)</title><rect x="55.1062%" y="885" width="44.8884%" height="15" fill="rgb(249,55,30)"/><text x="55.3562%" y="895.50">webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}::_{{closu..</text></g><g><title>webserver`tokio::task::core::Core&lt;T&gt;::poll (24,707 samples, 44.89%)</title><rect x="55.1062%" y="869" width="44.8884%" height="15" fill="rgb(237,47,42)"/><text x="55.3562%" y="879.50">webserver`tokio::task::core::Core&lt;T&gt;::poll</text></g><g><title>webserver`&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (24,707 samples, 44.89%)</title><rect x="55.1062%" y="853" width="44.8884%" height="15" fill="rgb(211,20,18)"/><text x="55.3562%" y="863.50">webserver`&lt;hyper::server::conn::spawn_all::NewSvcTask&lt;I,N,S,E,W&gt; as core::..</text></g><g><title>webserver`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (24,707 samples, 44.89%)</title><rect x="55.1062%" y="837" width="44.8884%" height="15" fill="rgb(231,203,46)"/><text x="55.3562%" y="847.50">webserver`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as ..</text></g><g><title>webserver`&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (24,707 samples, 44.89%)</title><rect x="55.1062%" y="821" width="44.8884%" height="15" fill="rgb(237,142,3)"/><text x="55.3562%" y="831.50">webserver`&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::futu..</text></g><g><title>webserver`&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (24,707 samples, 44.89%)</title><rect x="55.1062%" y="805" width="44.8884%" height="15" fill="rgb(241,107,1)"/><text x="55.3562%" y="815.50">webserver`&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::futur..</text></g><g><title>webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (24,707 samples, 44.89%)</title><rect x="55.1062%" y="789" width="44.8884%" height="15" fill="rgb(229,83,13)"/><text x="55.3562%" y="799.50">webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (24,707 samples, 44.89%)</title><rect x="55.1062%" y="773" width="44.8884%" height="15" fill="rgb(241,91,40)"/><text x="55.3562%" y="783.50">webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner</text></g><g><title>webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (24,703 samples, 44.88%)</title><rect x="55.1135%" y="757" width="44.8811%" height="15" fill="rgb(225,3,45)"/><text x="55.3635%" y="767.50">webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (24,666 samples, 44.81%)</title><rect x="55.1807%" y="741" width="44.8139%" height="15" fill="rgb(244,223,14)"/><text x="55.4307%" y="751.50">webserver`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write</text></g><g><title>webserver`tokio::runtime::Runtime::block_on (55,027 samples, 99.97%)</title><rect x="0.0218%" y="1173" width="99.9746%" height="15" fill="rgb(224,124,37)"/><text x="0.2718%" y="1183.50">webserver`tokio::runtime::Runtime::block_on</text></g><g><title>webserver`tokio::runtime::handle::Handle::enter (55,027 samples, 99.97%)</title><rect x="0.0218%" y="1157" width="99.9746%" height="15" fill="rgb(251,171,30)"/><text x="0.2718%" y="1167.50">webserver`tokio::runtime::handle::Handle::enter</text></g><g><title>webserver`tokio::runtime::context::enter (55,027 samples, 99.97%)</title><rect x="0.0218%" y="1141" width="99.9746%" height="15" fill="rgb(236,46,54)"/><text x="0.2718%" y="1151.50">webserver`tokio::runtime::context::enter</text></g><g><title>webserver`tokio::runtime::Runtime::block_on::_{{closure}} (55,027 samples, 99.97%)</title><rect x="0.0218%" y="1125" width="99.9746%" height="15" fill="rgb(245,213,5)"/><text x="0.2718%" y="1135.50">webserver`tokio::runtime::Runtime::block_on::_{{closure}}</text></g><g><title>webserver`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (55,027 samples, 99.97%)</title><rect x="0.0218%" y="1109" width="99.9746%" height="15" fill="rgb(230,144,27)"/><text x="0.2718%" y="1119.50">webserver`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on</text></g><g><title>webserver`tokio::runtime::basic_scheduler::SchedulerPriv::tick (24,723 samples, 44.92%)</title><rect x="55.0789%" y="1093" width="44.9174%" height="15" fill="rgb(220,86,6)"/><text x="55.3289%" y="1103.50">webserver`tokio::runtime::basic_scheduler::SchedulerPriv::tick</text></g><g><title>webserver`tokio::task::Task&lt;S&gt;::run (24,708 samples, 44.89%)</title><rect x="55.1062%" y="1077" width="44.8902%" height="15" fill="rgb(240,20,13)"/><text x="55.3562%" y="1087.50">webserver`tokio::task::Task&lt;S&gt;::run</text></g><g><title>webserver`tokio::task::raw::RawTask::poll (24,708 samples, 44.89%)</title><rect x="55.1062%" y="1061" width="44.8902%" height="15" fill="rgb(217,89,34)"/><text x="55.3562%" y="1071.50">webserver`tokio::task::raw::RawTask::poll</text></g><g><title>webserver`tokio::task::raw::poll (24,708 samples, 44.89%)</title><rect x="55.1062%" y="1045" width="44.8902%" height="15" fill="rgb(229,13,5)"/><text x="55.3562%" y="1055.50">webserver`tokio::task::raw::poll</text></g><g><title>webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll (24,708 samples, 44.89%)</title><rect x="55.1062%" y="1029" width="44.8902%" height="15" fill="rgb(244,67,35)"/><text x="55.3562%" y="1039.50">webserver`tokio::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>all (55,041 samples, 100%)</title><rect x="0.0000%" y="1333" width="100.0000%" height="15" fill="rgb(221,40,2)"/><text x="0.2500%" y="1343.50"></text></g><g><title>webserver`0x1 (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1317" width="99.9782%" height="15" fill="rgb(237,157,21)"/><text x="0.2718%" y="1327.50">webserver`0x1</text></g><g><title>libdyld.dylib`start (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1301" width="99.9782%" height="15" fill="rgb(222,94,11)"/><text x="0.2718%" y="1311.50">libdyld.dylib`start</text></g><g><title>webserver`main (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1285" width="99.9782%" height="15" fill="rgb(249,113,6)"/><text x="0.2718%" y="1295.50">webserver`main</text></g><g><title>webserver`std::rt::lang_start (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1269" width="99.9782%" height="15" fill="rgb(238,137,36)"/><text x="0.2718%" y="1279.50">webserver`std::rt::lang_start</text></g><g><title>webserver`std::rt::lang_start_internal (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1253" width="99.9782%" height="15" fill="rgb(210,102,26)"/><text x="0.2718%" y="1263.50">webserver`std::rt::lang_start_internal</text></g><g><title>webserver`__rust_maybe_catch_panic (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1237" width="99.9782%" height="15" fill="rgb(218,30,30)"/><text x="0.2718%" y="1247.50">webserver`__rust_maybe_catch_panic</text></g><g><title>webserver`std::panicking::try::do_call (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1221" width="99.9782%" height="15" fill="rgb(214,67,26)"/><text x="0.2718%" y="1231.50">webserver`std::panicking::try::do_call</text></g><g><title>webserver`std::rt::lang_start::_{{closure}} (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1205" width="99.9782%" height="15" fill="rgb(251,9,53)"/><text x="0.2718%" y="1215.50">webserver`std::rt::lang_start::_{{closure}}</text></g><g><title>webserver`webserver::main (55,029 samples, 99.98%)</title><rect x="0.0218%" y="1189" width="99.9782%" height="15" fill="rgb(228,204,25)"/><text x="0.2718%" y="1199.50">webserver`webserver::main</text></g></svg></svg>